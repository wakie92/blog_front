{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getValue, addTagArr } from \"../../store/modules/postUI\";\nimport { Head } from \"../../components/Write\";\nimport SubTitleInput from \"../../components/Write/SubTItleInput\";\nimport TagAndImg from '../../components/Write/TagAndImg';\nimport { addPhoto } from \"../../lib/Utils/S3\";\n\nconst EditorHeaderContainer = ({\n  onChange,\n  onUpload\n}) => {\n  const dispatch = useDispatch();\n  const {\n    postWrite\n  } = useSelector(state => ({\n    postWrite: state.postUI.postWrite\n  }));\n  const handleTags = useCallback(e => {\n    if (e.keyCode === 188 && postWrite.tag !== ',') {\n      dispatch(addTagArr());\n    }\n  }, [dispatch, postWrite.tag]);\n  const reqImgUpload = useCallback(async e => {\n    const bucketData = await addPhoto(e);\n\n    if (typeof bucketData === 'string') {\n      dispatch(getValue({\n        name: 'imgUrl',\n        value: bucketData\n      }));\n    }\n  }, [dispatch]);\n  const reqGetImgUrl = useCallback(async e => {\n    const bucketData = await addPhoto(e);\n\n    if (typeof bucketData === 'string') {\n      const imgMarkdown = `![](${bucketData})`;\n      dispatch(getValue({\n        name: 'inputValue',\n        value: `${postWrite.inputValue} ${imgMarkdown}`\n      }));\n    }\n  }, [dispatch, postWrite.inputValue]);\n  console.log(postWrite);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    onUpload: onUpload,\n    title: postWrite.title,\n    onChange: onChange,\n    reqImgUpload: reqImgUpload\n  }), __jsx(SubTitleInput, {\n    subTitle: postWrite.subTitle,\n    onChange: onChange\n  }), __jsx(TagAndImg, {\n    reqGetImgUrl: reqGetImgUrl,\n    tag: postWrite.tag,\n    tagArr: postWrite.tagArr,\n    onChange: onChange,\n    onAddTag: handleTags\n  }));\n};\n\nexport default EditorHeaderContainer;","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/containers/Common/EditorHeaderContainer.tsx"],"names":["useCallback","useDispatch","useSelector","getValue","addTagArr","Head","SubTitleInput","TagAndImg","addPhoto","EditorHeaderContainer","onChange","onUpload","dispatch","postWrite","state","postUI","handleTags","e","keyCode","tag","reqImgUpload","bucketData","name","value","reqGetImgUrl","imgMarkdown","inputValue","console","log","title","subTitle","tagArr"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,4BAApC;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AAQA,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA+C;AAC3E,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAgBX,WAAW,CAAEY,KAAD,KAAuB;AACvDD,IAAAA,SAAS,EAAEC,KAAK,CAACC,MAAN,CAAaF;AAD+B,GAAvB,CAAD,CAAjC;AAGA,QAAMG,UAAU,GAAGhB,WAAW,CAAEiB,CAAD,IAA8C;AAC3E,QAAGA,CAAC,CAACC,OAAF,KAAc,GAAd,IAAqBL,SAAS,CAACM,GAAV,KAAkB,GAA1C,EAA+C;AAC7CP,MAAAA,QAAQ,CAACR,SAAS,EAAV,CAAR;AACD;AACF,GAJ6B,EAI3B,CAACQ,QAAD,EAAWC,SAAS,CAACM,GAArB,CAJ2B,CAA9B;AAMA,QAAMC,YAAY,GAAGpB,WAAW,CAAC,MAAOiB,CAAP,IAAkD;AACjF,UAAMI,UAAyB,GAAG,MAAMb,QAAQ,CAACS,CAAD,CAAhD;;AACA,QAAI,OAAOI,UAAP,KAAsB,QAA1B,EAAoC;AAClCT,MAAAA,QAAQ,CAACT,QAAQ,CAAC;AAAEmB,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,KAAK,EAAEF;AAAzB,OAAD,CAAT,CAAR;AACD;AACF,GAL+B,EAK7B,CAACT,QAAD,CAL6B,CAAhC;AAOA,QAAMY,YAAY,GAAGxB,WAAW,CAAC,MAAOiB,CAAP,IAAkD;AACjF,UAAMI,UAAyB,GAAG,MAAMb,QAAQ,CAACS,CAAD,CAAhD;;AACA,QAAI,OAAOI,UAAP,KAAsB,QAA1B,EAAoC;AAClC,YAAMI,WAAW,GAAI,OAAMJ,UAAW,GAAtC;AACAT,MAAAA,QAAQ,CAACT,QAAQ,CAAC;AAAEmB,QAAAA,IAAI,EAAE,YAAR;AAAsBC,QAAAA,KAAK,EAAG,GAAEV,SAAS,CAACa,UAAW,IAAGD,WAAY;AAApE,OAAD,CAAT,CAAR;AACD;AACF,GAN+B,EAM7B,CAACb,QAAD,EAAWC,SAAS,CAACa,UAArB,CAN6B,CAAhC;AAOAC,EAAAA,OAAO,CAACC,GAAR,CAAYf,SAAZ;AACA,SACE,4BACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,QAAhB;AAA0B,IAAA,KAAK,EAAEE,SAAS,CAACgB,KAA3C;AAAkD,IAAA,QAAQ,EAAEnB,QAA5D;AAAsE,IAAA,YAAY,EAAEU;AAApF,IADF,EAEE,MAAC,aAAD;AAAe,IAAA,QAAQ,EAAEP,SAAS,CAACiB,QAAnC;AAA6C,IAAA,QAAQ,EAAEpB;AAAvD,IAFF,EAGE,MAAC,SAAD;AACE,IAAA,YAAY,EAAEc,YADhB;AAEE,IAAA,GAAG,EAAEX,SAAS,CAACM,GAFjB;AAGE,IAAA,MAAM,EAAEN,SAAS,CAACkB,MAHpB;AAIE,IAAA,QAAQ,EAAErB,QAJZ;AAKE,IAAA,QAAQ,EAAEM;AALZ,IAHF,CADF;AAaD,CAvCD;;AAyCA,eAAeP,qBAAf","sourcesContent":["import { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getValue, addTagArr } from \"../../store/modules/postUI\";\r\nimport { Head } from \"../../components/Write\";\r\nimport SubTitleInput from \"../../components/Write/SubTItleInput\";\r\nimport TagAndImg from '../../components/Write/TagAndImg';\r\nimport { addPhoto } from \"../../lib/Utils/S3\";\r\nimport { RootState } from \"../../store/modules\";\r\n\r\n\r\ntype EditorHeaderProps = {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onUpload: () => void;\r\n}\r\nconst EditorHeaderContainer = ({ onChange, onUpload }: EditorHeaderProps) => {\r\n  const dispatch = useDispatch();\r\n  const { postWrite } = useSelector((state: RootState) => ({\r\n    postWrite: state.postUI.postWrite,\r\n  }))\r\n  const handleTags = useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if(e.keyCode === 188 && postWrite.tag !== ',') {\r\n      dispatch(addTagArr());\r\n    }\r\n  }, [dispatch, postWrite.tag]);\r\n  \r\n  const reqImgUpload = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const bucketData: string | void = await addPhoto(e);\r\n    if (typeof bucketData === 'string') {\r\n      dispatch(getValue({ name: 'imgUrl', value: bucketData }));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const reqGetImgUrl = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const bucketData: string | void = await addPhoto(e);\r\n    if (typeof bucketData === 'string') {\r\n      const imgMarkdown = `![](${bucketData})`;\r\n      dispatch(getValue({ name: 'inputValue', value: `${postWrite.inputValue} ${imgMarkdown}` }));\r\n    }\r\n  }, [dispatch, postWrite.inputValue]);\r\n  console.log(postWrite);\r\n  return (\r\n    <>\r\n      <Head onUpload={onUpload} title={postWrite.title} onChange={onChange} reqImgUpload={reqImgUpload} />\r\n      <SubTitleInput subTitle={postWrite.subTitle} onChange={onChange} />\r\n      <TagAndImg\r\n        reqGetImgUrl={reqGetImgUrl}\r\n        tag={postWrite.tag}\r\n        tagArr={postWrite.tagArr}\r\n        onChange={onChange}\r\n        onAddTag={handleTags}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditorHeaderContainer;"]},"metadata":{},"sourceType":"module"}