{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Editor, Preview } from '../../components/Write';\nimport { getValue, resetInputValue, setInputValues } from '../../store/modules/postUI';\nimport EditorHeaderContainer from '../Common/EditorHeaderContainer';\nimport { putPostAsync } from '../../store/modules/post';\nimport { ROUTES } from '../../lib/Routes/Routes';\nimport { removeExp } from '../../lib/Utils/utils';\n\nconst EditContainer = ({\n  editMode\n}) => {\n  const dispatch = useDispatch();\n  const {\n    postWrite,\n    post\n  } = useSelector(state => ({\n    postWrite: state.postUI.postWrite,\n    post: state.post.post\n  }));\n  const router = useRouter();\n  const mdRef = useRef();\n  const handleChange = useCallback(e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(getValue({\n      name,\n      value\n    }));\n  }, [dispatch]);\n  const handleConv = useCallback(html => {\n    dispatch(getValue({\n      name: 'mdValue',\n      value: html\n    }));\n  }, [dispatch]);\n  const onUpload = useCallback(() => {\n    const {\n      title,\n      inputValue,\n      mdValue,\n      imgUrl,\n      subTitle,\n      tagArr\n    } = postWrite;\n    const {\n      res,\n      resId\n    } = post.data;\n    const uploadDate = new Date().toISOString();\n    const withoutExp = removeExp(inputValue);\n    const dataForUpload = {\n      title: title,\n      rawContent: inputValue,\n      content: withoutExp,\n      contentMd: mdValue,\n      date: uploadDate,\n      imgUrl: imgUrl,\n      id: res.id,\n      subTitle: subTitle,\n      tagArr: tagArr\n    };\n    dispatch(putPostAsync.request({\n      post: dataForUpload,\n      id: resId\n    }));\n    router.push(ROUTES.home, ROUTES.home, {\n      shallow: true\n    });\n  }, [dispatch, postWrite]);\n  useEffect(() => {\n    mdRef.current.scrollTo(0, mdRef.current.scrollHeight);\n  }, [postWrite.inputValue]);\n  useEffect(() => {\n    const {\n      rawContent,\n      contentMd,\n      imgUrl,\n      title,\n      subTitle,\n      tagArr\n    } = post.data.res;\n    dispatch(setInputValues({\n      title,\n      inputValue: rawContent,\n      mdValue: contentMd,\n      imgUrl,\n      subTitle,\n      tagArr,\n      tag: ''\n    }));\n    return () => {\n      dispatch(resetInputValue());\n    };\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(EditBox, null, __jsx(EditPart, null, __jsx(EditorHeaderContainer, {\n    onChange: handleChange,\n    onUpload: onUpload\n  }), __jsx(Editor, {\n    inputValue: postWrite.inputValue,\n    onChange: handleChange\n  })), __jsx(Preview, {\n    inputValue: postWrite.inputValue,\n    mdRef: mdRef,\n    onChange: handleConv\n  })));\n};\n\nexport default React.memo(EditContainer);\nconst EditBox = styled.div.withConfig({\n  displayName: \"EditContainer__EditBox\",\n  componentId: \"zobh5v-0\"\n})([\"display:flex;height:94rem;justify-content:space-between;\"]);\nconst EditPart = styled.div.withConfig({\n  displayName: \"EditContainer__EditPart\",\n  componentId: \"zobh5v-1\"\n})([\"width:calc(50% - 1.6rem);\"]);","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/containers/Edit/EditContainer.tsx"],"names":["React","useCallback","useEffect","useRef","useRouter","styled","useSelector","useDispatch","Editor","Preview","getValue","resetInputValue","setInputValues","EditorHeaderContainer","putPostAsync","ROUTES","removeExp","EditContainer","editMode","dispatch","postWrite","post","state","postUI","router","mdRef","handleChange","e","value","name","target","handleConv","html","onUpload","title","inputValue","mdValue","imgUrl","subTitle","tagArr","res","resId","data","uploadDate","Date","toISOString","withoutExp","dataForUpload","rawContent","content","contentMd","date","id","request","push","home","shallow","current","scrollTo","scrollHeight","tag","memo","EditBox","div","EditPart"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Editor, Preview } from '../../components/Write';\r\nimport { RootState } from '../../store/modules';\r\nimport { getValue, resetInputValue, setInputValues, } from '../../store/modules/postUI';\r\nimport EditorHeaderContainer from '../Common/EditorHeaderContainer';\r\nimport { putPostAsync, Post } from '../../store/modules/post';\r\nimport { ROUTES } from '../../lib/Routes/Routes';\r\nimport { removeExp } from '../../lib/Utils/utils';\r\n\r\ntype EditContainerProps = {\r\n  editMode: boolean;\r\n};\r\n\r\nconst EditContainer = ({ editMode }: EditContainerProps) => {\r\n  const dispatch = useDispatch();\r\n  const { postWrite, post } = useSelector((state: RootState) => ({\r\n    postWrite: state.postUI.postWrite,\r\n    post: state.post.post,\r\n  }))\r\n  const router = useRouter();\r\n  const mdRef = useRef<HTMLDivElement>();\r\n\r\n  const handleChange = useCallback((e: React.ChangeEvent<any>) => {\r\n    const { value, name } = e.target;\r\n    dispatch(getValue({ name, value }));\r\n  }, [dispatch]);\r\n\r\n  const handleConv = useCallback((html: string) => {\r\n    dispatch(getValue({ name: 'mdValue', value: html}));\r\n  }, [dispatch]);\r\n\r\n  const onUpload = useCallback(() => {\r\n    const { title, inputValue, mdValue, imgUrl, subTitle, tagArr} = postWrite\r\n    const { res, resId } = post.data;\r\n    const uploadDate = new Date().toISOString();\r\n    const withoutExp = removeExp(inputValue);\r\n    const dataForUpload:Post = {\r\n      title: title,\r\n      rawContent: inputValue,\r\n      content: withoutExp,\r\n      contentMd: mdValue,\r\n      date: uploadDate,\r\n      imgUrl: imgUrl,\r\n      id: res.id,\r\n  \t\tsubTitle: subTitle,\r\n      tagArr: tagArr,\r\n    }\r\n    dispatch(putPostAsync.request({post: dataForUpload, id: resId}));\r\n    router.push(ROUTES.home, ROUTES.home, { shallow: true });\r\n  }, [dispatch, postWrite]);\r\n  \r\n\r\n  useEffect(() => {\r\n    mdRef.current.scrollTo(0, mdRef.current.scrollHeight);\r\n  }, [postWrite.inputValue])\r\n\r\n  useEffect(() => {\r\n    const { rawContent, contentMd, imgUrl, title, subTitle, tagArr } = post.data.res\r\n    dispatch(setInputValues({\r\n      title,\r\n      inputValue: rawContent,\r\n      mdValue:contentMd,\r\n      imgUrl, \r\n      subTitle,\r\n      tagArr,\r\n      tag: '', \r\n    }));\r\n    return () => {\r\n      dispatch(resetInputValue());\r\n    }\r\n  }, []);\r\n  return (\r\n    <>\r\n      <EditBox>\r\n        <EditPart>\r\n          <EditorHeaderContainer \r\n            onChange={handleChange}\r\n            onUpload={onUpload}\r\n          />\r\n          <Editor inputValue={postWrite.inputValue} onChange={handleChange} />\r\n        </EditPart>\r\n        <Preview inputValue={postWrite.inputValue} mdRef={mdRef} onChange={handleConv} />\r\n\t\t  </EditBox>\r\n    </>\r\n  ); \r\n}\r\n\r\nexport default React.memo(EditContainer);\r\nconst EditBox = styled.div`\r\n\tdisplay: flex;\r\n\theight: 94rem;\r\n\tjustify-content: space-between;\r\n`;\r\n\r\nconst EditPart = styled.div`width: calc(50% - 1.6rem);`;"]},"metadata":{},"sourceType":"module"}