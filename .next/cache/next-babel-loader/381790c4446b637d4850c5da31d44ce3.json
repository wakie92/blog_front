{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getType } from 'typesafe-actions';\nexport const asyncState = {\n  initial: initialData => ({\n    loading: false,\n    data: initialData || null,\n    error: null\n  }),\n  loading: data => ({\n    loading: true,\n    data: data || null,\n    error: null\n  }),\n  success: data => ({\n    loading: false,\n    data,\n    error: null\n  }),\n  error: error => ({\n    loading: false,\n    data: null,\n    error: error\n  })\n};\nexport function transformToArray(asyncActionCreator) {\n  const {\n    request,\n    success,\n    failure\n  } = asyncActionCreator;\n  return [request, success, failure];\n}\nexport const handleAsyncActions = (type, key) => {\n  return (state, action) => {\n    const [request, success, failure] = transformToArray(type).map(getType);\n\n    switch (action.type) {\n      case request:\n        return _objectSpread({}, state, {\n          [key]: asyncState.loading()\n        });\n\n      case success:\n        return _objectSpread({}, state, {\n          [key]: asyncState.success(action.payload)\n        });\n\n      case failure:\n        return _objectSpread({}, state, {\n          [key]: asyncState.error(action.payload)\n        });\n\n      default:\n        return state;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}