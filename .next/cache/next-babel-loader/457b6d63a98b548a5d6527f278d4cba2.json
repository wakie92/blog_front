{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime-corejs2/helpers/esm/objectDestructuringEmpty\";\nvar __jsx = React.createElement;\nimport React, { useRef, useCallback, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Editor, Preview } from '../../components/Write';\nimport { getValue, resetInputValue } from '../../store/modules/postUI';\nimport { ROUTES } from '../../lib/Routes/Routes';\nimport { removeExp, checkUser } from '../../lib/Utils/utils';\nimport { postAsync } from '../../store/modules/post';\nimport EditorHeaderContainer from '../Common/EditorHeaderContainer';\nimport useInputInEditor from '../../lib/hooks/useInput';\n\nvar WriteContainer = function WriteContainer(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var dispatch = useDispatch();\n\n  var _useInputInEditor = useInputInEditor(),\n      _useInputInEditor2 = _slicedToArray(_useInputInEditor, 2),\n      onChange = _useInputInEditor2[0],\n      reset = _useInputInEditor2[1];\n\n  var mdRef = useRef();\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      postWrite: state.postUI.postWrite,\n      postsList: state.post.postsList,\n      reqPost: state.post.reqPost\n    };\n  }),\n      postWrite = _useSelector.postWrite,\n      postsList = _useSelector.postsList,\n      reqPost = _useSelector.reqPost;\n\n  var router = useRouter();\n  var handleChange = useCallback(function (e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name;\n    dispatch(getValue({\n      name: name,\n      value: value\n    }));\n  }, [dispatch]);\n  var handleConv = useCallback(function (html) {\n    dispatch(getValue({\n      name: 'mdValue',\n      value: html\n    }));\n  }, [dispatch]);\n  var onUpload = useCallback(function () {\n    var uploadDate = new Date().toISOString();\n    var title = postWrite.title,\n        inputValue = postWrite.inputValue,\n        mdValue = postWrite.mdValue,\n        imgUrl = postWrite.imgUrl,\n        subTitle = postWrite.subTitle,\n        tagArr = postWrite.tagArr;\n    var withoutExp = removeExp(inputValue);\n    var dataForUpload = {\n      title: title,\n      rawContent: inputValue,\n      content: withoutExp,\n      contentMd: mdValue,\n      date: uploadDate,\n      imgUrl: imgUrl,\n      id: postsList.data[0].id + 1,\n      subTitle: subTitle,\n      tagArr: tagArr\n    };\n\n    try {\n      dispatch(postAsync.request(dataForUpload));\n    } catch (err) {\n      throw err;\n    }\n  }, [dispatch, postWrite]);\n  useEffect(function () {\n    if (reqPost.data) {\n      router.push(ROUTES.home, ROUTES.home, {\n        shallow: false\n      });\n    }\n  }, [reqPost.data]);\n  useEffect(function () {\n    mdRef.current.scrollTo(0, mdRef.current.scrollHeight);\n  }, [postWrite.inputValue]);\n  useEffect(function () {\n    return function () {\n      dispatch(resetInputValue());\n      reset();\n      checkUser();\n    };\n  }, []);\n  return __jsx(EditBox, null, __jsx(EditPart, null, __jsx(EditorHeaderContainer, {\n    onChange: onChange,\n    onUpload: onUpload\n  }), __jsx(Editor, {\n    inputValue: postWrite.inputValue,\n    onChange: handleChange\n  })), __jsx(Preview, {\n    inputValue: postWrite.inputValue,\n    mdRef: mdRef,\n    onChange: handleConv\n  }));\n};\n\nexport default React.memo(WriteContainer);\nvar EditBox = styled.div.withConfig({\n  displayName: \"WriteContainer__EditBox\",\n  componentId: \"sc-1ee72qh-0\"\n})([\"display:flex;height:94rem;justify-content:space-between;\"]);\nvar EditPart = styled.div.withConfig({\n  displayName: \"WriteContainer__EditPart\",\n  componentId: \"sc-1ee72qh-1\"\n})([\"width:calc(50% - 1.6rem);\"]);","map":null,"metadata":{},"sourceType":"module"}