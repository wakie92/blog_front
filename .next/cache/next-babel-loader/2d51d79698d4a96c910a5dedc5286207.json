{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { firebaseDB } from '../../config/init-firebase';\nconst db = firebaseDB().firestore();\nconst blogDB = db.collection(\"blogDB\");\nexport const GetPostsList = async cnt => {\n  // const user = firebase.auth().currentUser\n  const query = blogDB.orderBy(\"date\", \"desc\").limit(cnt);\n  const response = await query.get().then(querySnapshot => {\n    return querySnapshot.docs.map(data => {\n      const ele = _objectSpread({}, data.data(), {\n        id: data.id\n      });\n\n      return ele;\n    });\n  }).catch(e => console.log(e));\n  return response;\n};\nexport const PutPost = async ({\n  post,\n  id\n}) => {\n  const query = blogDB.doc(id);\n  const response = await query.set(post).then(res => {\n    return 'success';\n  }).catch(err => {\n    return err;\n  });\n  return response.data;\n};\nexport const PostUpdate = async data => {\n  const response = await blogDB.add(data).then(res => {\n    return res.id;\n  }).catch(err => {\n    return err;\n  });\n  return response;\n};\nexport const GetPost = async index => {\n  const query = blogDB.doc(index);\n  const response = await query.get().then(doc => {\n    return {\n      res: _objectSpread({}, doc.data(), {\n        id: doc.id\n      }),\n      resId: doc.id\n    };\n  });\n  return response;\n};\nexport const DeletePost = async id => {\n  const query = blogDB.doc(id);\n  const response = await query.delete().then(() => {\n    return 'success';\n  }).catch(err => {\n    return err;\n  });\n  return response;\n};","map":null,"metadata":{},"sourceType":"module"}