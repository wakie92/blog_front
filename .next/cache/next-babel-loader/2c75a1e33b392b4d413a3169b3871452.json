{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { call, put } from 'redux-saga/effects';\n\nfunction isPayloadAction(action) {\n  return action.payload !== undefined;\n}\n\nexport default function createAsyncSaga(asyncActionCreator, promiseCreator) {\n  return (\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function saga(action) {\n      var result;\n      return _regeneratorRuntime.wrap(function saga$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!isPayloadAction(action)) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return call(promiseCreator, action.payload);\n\n            case 4:\n              _context.t0 = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.next = 9;\n              return call(promiseCreator);\n\n            case 9:\n              _context.t0 = _context.sent;\n\n            case 10:\n              result = _context.t0;\n              _context.next = 13;\n              return put(asyncActionCreator.success(result));\n\n            case 13:\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t1 = _context[\"catch\"](0);\n              _context.next = 19;\n              return put(asyncActionCreator.failure(_context.t1));\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, saga, null, [[0, 15]]);\n    })\n  );\n}","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/lib/Utils/createAsyncSaga.ts"],"names":["action","result","isPayloadAction","call","put","asyncActionCreator"],"mappings":";AAAA,SAAA,IAAA,EAAA,GAAA,QAAA,oBAAA;;AAKA,SAAA,eAAA,CAAA,MAAA,EAA6E;AAC5E,SAAOA,MAAM,CAANA,OAAAA,KAAP,SAAA;AACA;;AAED,eAAe,SAAA,eAAA,CAAA,kBAAA,EAAA,cAAA,EAGb;AACD;AAAA;AAAA,IAAA,mBAAA,CAAA,IAAA,CAAO,SAAA,IAAA,CAAA,MAAA,EAAA;AAAA,UAAA,MAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,KAAA,CAAA,QAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;;AAAA,kBAAA,CAEUE,eAAe,CAFzB,MAEyB,CAFzB,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAGH,qBAAMC,IAAI,CAAA,cAAA,EAAiBH,MAAM,CAAjC,OAAU,CAAV;;AAHG,iBAAA,CAAA;AAAA,cAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,IAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,iBAAA,CAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAIH,qBAAMG,IAAI,CAAV,cAAU,CAAV;;AAJG,iBAAA,CAAA;AAAA,cAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,IAAA;;AAAA,iBAAA,EAAA;AAECF,cAAAA,MAFD,GAAA,QAAA,CAAA,EAECA;AAFD,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAKL,qBAAMG,GAAG,CAACC,kBAAkB,CAAlBA,OAAAA,CAAV,MAAUA,CAAD,CAAT;;AALK,iBAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,iBAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,cAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAOL,qBAAMD,GAAG,CAACC,kBAAkB,CAAlBA,OAAAA,CAAAA,QAAAA,CAAV,EAAUA,CAAD,CAAT;;AAPK,iBAAA,EAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAAP,KAAA;AAAA;AAUA","sourcesContent":["import { call, put } from 'redux-saga/effects';\r\nimport { AsyncActionCreatorBuilder, PayloadAction } from 'typesafe-actions';\r\n\r\ntype PromiseCreatorFunction<P, T> = ((payload: P) => Promise<T>) | (() => Promise<T>);\r\n\r\nfunction isPayloadAction<P>(action: any): action is PayloadAction<string, P> {\r\n\treturn action.payload !== undefined;\r\n}\r\n\r\nexport default function createAsyncSaga<T1, P1, T2, P2, T3, P3>(\r\n\tasyncActionCreator: AsyncActionCreatorBuilder<[T1, [P1, undefined]], [T2, [P2, undefined]], [T3, [P3, undefined]]>,\r\n\tpromiseCreator: PromiseCreatorFunction<P1, P2>\r\n) {\r\n\treturn function* saga(action: ReturnType<typeof asyncActionCreator.request>) {\r\n\t\ttry {\r\n\t\t\tconst result = isPayloadAction<P1>(action)\r\n\t\t\t? yield call(promiseCreator, action.payload)\r\n\t\t\t: yield call(promiseCreator);\r\n\t\t\tyield put(asyncActionCreator.success(result));\r\n\t\t} catch (e) {\r\n\t\t\tyield put(asyncActionCreator.failure(e));\r\n\t\t}\r\n\t};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}