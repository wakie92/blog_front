{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, createReducer } from 'typesafe-actions';\nconst SET_INPUT_VALUES = 'post/SET_INPUT_VALUES';\nconst INPUT_VALUE = 'post/INPUT_VALUE';\nconst RESET_INPUT_VALUE = 'post/RESET_INPUT_VALUE';\nconst ADD_TAG_ARR = 'post/ADD_TAG_ARR';\nexport const addTagArr = createAction(ADD_TAG_ARR)();\nexport const getValue = createAction(INPUT_VALUE, ({\n  name,\n  value\n}) => ({\n  name,\n  value\n}))();\nexport const resetInputValue = createAction(RESET_INPUT_VALUE)();\nexport const setInputValues = createAction(SET_INPUT_VALUES, ({\n  title,\n  inputValue,\n  mdValue,\n  imgUrl,\n  subTitle,\n  tagArr,\n  tag\n}) => ({\n  title,\n  inputValue,\n  mdValue,\n  imgUrl,\n  tagArr,\n  subTitle,\n  tag\n}))();\nconst actions = {\n  getValue,\n  resetInputValue,\n  setInputValues,\n  addTagArr\n};\nconst initialState = {\n  postWrite: {\n    title: '',\n    inputValue: '',\n    mdValue: '',\n    subTitle: '',\n    imgUrl: null,\n    tagArr: [],\n    tag: ''\n  }\n};\nconst post = createReducer(initialState, {\n  [SET_INPUT_VALUES]: (state, action) => {\n    return _objectSpread({}, state, {\n      postWrite: action.payload\n    });\n  },\n  [RESET_INPUT_VALUE]: (state, action) => {\n    return _objectSpread({}, state, {\n      postWrite: {\n        title: '',\n        inputValue: '',\n        mdValue: '',\n        subTitle: '',\n        imgUrl: null,\n        tagArr: [],\n        tag: ''\n      }\n    });\n  },\n  [INPUT_VALUE]: (state, {\n    payload: {\n      name,\n      value\n    }\n  }) => {\n    return _objectSpread({}, state, {\n      postWrite: _objectSpread({}, state.postWrite, {\n        [name]: value\n      })\n    });\n  },\n  [ADD_TAG_ARR]: (state, action) => {\n    const {\n      tagArr,\n      tag\n    } = state.postWrite;\n    const addTagArr = tagArr.concat(tag.replace(',', ''));\n    return _objectSpread({}, state, {\n      postWrite: _objectSpread({}, state.postWrite, {\n        tagArr: addTagArr,\n        tag: ''\n      })\n    });\n  }\n});\nexport default post;","map":null,"metadata":{},"sourceType":"module"}