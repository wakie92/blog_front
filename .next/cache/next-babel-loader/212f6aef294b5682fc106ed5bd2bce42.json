{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport AWS from 'aws-sdk';\nimport { AWSConfig } from '../../config/awsconfig';\nvar albumBucketName = AWSConfig.albumBucketName,\n    bucketRegion = AWSConfig.bucketRegion,\n    IdentityPoolId = AWSConfig.IdentityPoolId;\nvar paramKey = 'blog-oscar/images/';\nAWS.config.region = bucketRegion; // 리전\n\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n  IdentityPoolId: IdentityPoolId\n});\nAWS.config.update({\n  region: bucketRegion,\n  credentials: new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: IdentityPoolId\n  })\n});\nexport var addPhoto =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(e) {\n    var file, upload, result, url;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            file = e.target.files[0];\n            upload = new AWS.S3.ManagedUpload({\n              params: {\n                Bucket: albumBucketName,\n                Key: \"\".concat(paramKey).concat(file.name),\n                Body: file,\n                ACL: 'public-read'\n              }\n            });\n            result = upload.promise();\n            url = result.then(function (data) {\n              alert('사진이 등록되었습니다.');\n              return data.Location;\n            }, function (err) {\n              alert(\"\".concat(err.message));\n            });\n            return _context.abrupt(\"return\", url);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addPhoto(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/lib/Utils/S3.ts"],"names":["AWS","AWSConfig","albumBucketName","bucketRegion","IdentityPoolId","paramKey","config","region","credentials","CognitoIdentityCredentials","update","addPhoto","e","file","target","files","upload","S3","ManagedUpload","params","Bucket","Key","name","Body","ACL","result","promise","url","then","data","alert","Location","err","message"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,SAAhB;AACA,SAASC,SAAT,QAA0B,wBAA1B;IAEQC,e,GAAkDD,S,CAAlDC,e;IAAiBC,Y,GAAiCF,S,CAAjCE,Y;IAAcC,c,GAAmBH,S,CAAnBG,c;AACvC,IAAMC,QAAQ,GAAG,oBAAjB;AAEAL,GAAG,CAACM,MAAJ,CAAWC,MAAX,GAAoBJ,YAApB,C,CAAkC;;AAClCH,GAAG,CAACM,MAAJ,CAAWE,WAAX,GAAyB,IAAIR,GAAG,CAACS,0BAAR,CAAmC;AAC3DL,EAAAA,cAAc,EAAEA;AAD2C,CAAnC,CAAzB;AAGAJ,GAAG,CAACM,MAAJ,CAAWI,MAAX,CAAkB;AACjBH,EAAAA,MAAM,EAAEJ,YADS;AAEjBK,EAAAA,WAAW,EAAE,IAAIR,GAAG,CAACS,0BAAR,CAAmC;AAC/CL,IAAAA,cAAc,EAAEA;AAD+B,GAAnC;AAFI,CAAlB;AAOA,OAAO,IAAMO,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,IADiB,GACVD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CADU;AAEjBC,YAAAA,MAFiB,GAER,IAAIhB,GAAG,CAACiB,EAAJ,CAAOC,aAAX,CAAyB;AACvCC,cAAAA,MAAM,EAAE;AACPC,gBAAAA,MAAM,EAAElB,eADD;AAEPmB,gBAAAA,GAAG,YAAKhB,QAAL,SAAgBQ,IAAI,CAACS,IAArB,CAFI;AAGPC,gBAAAA,IAAI,EAAEV,IAHC;AAIPW,gBAAAA,GAAG,EAAE;AAJE;AAD+B,aAAzB,CAFQ;AAWjBC,YAAAA,MAXiB,GAWRT,MAAM,CAACU,OAAP,EAXQ;AAYjBC,YAAAA,GAZiB,GAYaF,MAAM,CAACG,IAAP,CACnC,UAACC,IAAD,EAAyC;AACxCC,cAAAA,KAAK,CAAC,cAAD,CAAL;AACA,qBAAOD,IAAI,CAACE,QAAZ;AACA,aAJkC,EAKnC,UAACC,GAAD,EAAgB;AACfF,cAAAA,KAAK,WAAIE,GAAG,CAACC,OAAR,EAAL;AACA,aAPkC,CAZb;AAAA,6CAqBhBN,GArBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARhB,QAAQ;AAAA;AAAA;AAAA,GAAd","sourcesContent":["import AWS from 'aws-sdk';\r\nimport { AWSConfig } from '../../config/awsconfig';\r\n\r\nconst { albumBucketName, bucketRegion, IdentityPoolId } = AWSConfig\r\nconst paramKey = 'blog-oscar/images/';\r\n\r\nAWS.config.region = bucketRegion; // 리전\r\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n\tIdentityPoolId: IdentityPoolId\r\n});\r\nAWS.config.update({\r\n\tregion: bucketRegion,\r\n\tcredentials: new AWS.CognitoIdentityCredentials({\r\n\t\tIdentityPoolId: IdentityPoolId\r\n\t})\r\n});\r\n\r\nexport const addPhoto = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\tconst file = e.target.files[0];\r\n\tconst upload = new AWS.S3.ManagedUpload({\r\n\t\tparams: {\r\n\t\t\tBucket: albumBucketName,\r\n\t\t\tKey: `${paramKey}${file.name}`,\r\n\t\t\tBody: file,\r\n\t\t\tACL: 'public-read'\r\n\t\t}\r\n\t});\r\n\r\n\tconst result = upload.promise();\r\n\tconst url: Promise<string | void> = result.then(\r\n\t\t(data: AWS.S3.ManagedUpload.SendData) => {\r\n\t\t\talert('사진이 등록되었습니다.');\r\n\t\t\treturn data.Location;\r\n\t\t},\r\n\t\t(err: Error) => {\r\n\t\t\talert(`${err.message}`);\r\n\t\t}\r\n\t);\r\n\treturn url;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}