{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { asyncState, transformToArray, handleAsyncActions } from './../../../lib/Utils/asyncUtils';\nimport { createReducer } from 'typesafe-actions';\nimport { getPostsListAsync, GET_POSTS_LIST, GET_POSTS_LIST_SUCCESS, GET_POSTS_LIST_ERROR, UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_ERROR, GET_POST, GET_POST_SUCCESS, GET_POST_ERROR } from './actions';\nconst initialState = {\n  postsList: asyncState.initial(),\n  reqPost: asyncState.initial(),\n  post: asyncState.initial()\n};\nconst post = createReducer(initialState, {\n  [GET_POSTS_LIST]: state => _objectSpread({}, state, {\n    postsList: asyncState.loading()\n  }),\n  [GET_POSTS_LIST_SUCCESS]: (state, action) => {\n    return _objectSpread({}, state, {\n      postsList: asyncState.success(action.payload)\n    });\n  },\n  [GET_POSTS_LIST_ERROR]: (state, action) => _objectSpread({}, state, {\n    postsList: asyncState.error(action.payload)\n  }),\n  [UPDATE_POST]: state => _objectSpread({}, state, {\n    reqPost: asyncState.loading()\n  }),\n  [UPDATE_POST_SUCCESS]: (state, action) => _objectSpread({}, state, {\n    reqPost: asyncState.success(action.payload)\n  }),\n  [UPDATE_POST_ERROR]: (state, action) => _objectSpread({}, state, {\n    reqPost: asyncState.error(action.payload)\n  }),\n  [GET_POST]: state => _objectSpread({}, state, {\n    post: asyncState.loading()\n  }),\n  [GET_POST_SUCCESS]: (state, action) => _objectSpread({}, state, {\n    post: asyncState.success(action.payload)\n  }),\n  [GET_POST_ERROR]: (state, action) => _objectSpread({}, state, {\n    post: asyncState.error(action.payload)\n  })\n}); // refactoring code\n\nconst test = createReducer(initialState).handleAction(transformToArray(getPostsListAsync), handleAsyncActions(getPostsListAsync, 'postsList'));\nexport default post;","map":null,"metadata":{},"sourceType":"module"}