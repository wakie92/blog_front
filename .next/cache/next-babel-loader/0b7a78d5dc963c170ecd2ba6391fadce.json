{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\n\nfunction isPayloadAction(action) {\n  return action.payload !== undefined;\n}\n\nexport default function createAsyncSaga(asyncActionCreator, promiseCreator) {\n  return function* saga(action) {\n    try {\n      const result = isPayloadAction(action) ? yield call(promiseCreator, action.payload) : yield call(promiseCreator);\n      yield put(asyncActionCreator.success(result));\n    } catch (e) {\n      yield put(asyncActionCreator.failure(e));\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/lib/Utils/createAsyncSaga.ts"],"names":["call","put","isPayloadAction","action","payload","undefined","createAsyncSaga","asyncActionCreator","promiseCreator","saga","result","success","e","failure"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;;AAKA,SAASC,eAAT,CAA4BC,MAA5B,EAA6E;AAC5E,SAAOA,MAAM,CAACC,OAAP,KAAmBC,SAA1B;AACA;;AAED,eAAe,SAASC,eAAT,CACdC,kBADc,EAEdC,cAFc,EAGb;AACD,SAAO,UAAUC,IAAV,CAAeN,MAAf,EAAsE;AAC5E,QAAI;AACH,YAAMO,MAAM,GAAGR,eAAe,CAAKC,MAAL,CAAf,GACb,MAAMH,IAAI,CAACQ,cAAD,EAAiBL,MAAM,CAACC,OAAxB,CADG,GAEb,MAAMJ,IAAI,CAACQ,cAAD,CAFZ;AAGA,YAAMP,GAAG,CAACM,kBAAkB,CAACI,OAAnB,CAA2BD,MAA3B,CAAD,CAAT;AACA,KALD,CAKE,OAAOE,CAAP,EAAU;AACX,YAAMX,GAAG,CAACM,kBAAkB,CAACM,OAAnB,CAA2BD,CAA3B,CAAD,CAAT;AACA;AACD,GATD;AAUA","sourcesContent":["import { call, put } from 'redux-saga/effects';\r\nimport { AsyncActionCreatorBuilder, PayloadAction } from 'typesafe-actions';\r\n\r\ntype PromiseCreatorFunction<P, T> = ((payload: P) => Promise<T>) | (() => Promise<T>);\r\n\r\nfunction isPayloadAction<P>(action: any): action is PayloadAction<string, P> {\r\n\treturn action.payload !== undefined;\r\n}\r\n\r\nexport default function createAsyncSaga<T1, P1, T2, P2, T3, P3>(\r\n\tasyncActionCreator: AsyncActionCreatorBuilder<[T1, [P1, undefined]], [T2, [P2, undefined]], [T3, [P3, undefined]]>,\r\n\tpromiseCreator: PromiseCreatorFunction<P1, P2>\r\n) {\r\n\treturn function* saga(action: ReturnType<typeof asyncActionCreator.request>) {\r\n\t\ttry {\r\n\t\t\tconst result = isPayloadAction<P1>(action)\r\n\t\t\t? yield call(promiseCreator, action.payload)\r\n\t\t\t: yield call(promiseCreator);\r\n\t\t\tyield put(asyncActionCreator.success(result));\r\n\t\t} catch (e) {\r\n\t\t\tyield put(asyncActionCreator.failure(e));\r\n\t\t}\r\n\t};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}