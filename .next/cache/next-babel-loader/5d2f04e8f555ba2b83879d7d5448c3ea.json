{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { asyncState, transformToArray, handleAsyncActions } from './../../../lib/Utils/asyncUtils';\nimport { createReducer } from 'typesafe-actions';\nimport { getPostsListAsync, GET_POSTS_LIST, GET_POSTS_LIST_SUCCESS, GET_POSTS_LIST_ERROR, UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_ERROR, GET_POST, GET_POST_SUCCESS, GET_POST_ERROR } from './actions';\nconst initialState = {\n  postsList: asyncState.initial(),\n  reqPost: asyncState.initial(),\n  post: asyncState.initial()\n};\nconst post = createReducer(initialState, {\n  [GET_POSTS_LIST]: state => _objectSpread({}, state, {\n    postsList: asyncState.loading()\n  }),\n  [GET_POSTS_LIST_SUCCESS]: (state, action) => {\n    return _objectSpread({}, state, {\n      postsList: asyncState.success(action.payload)\n    });\n  },\n  [GET_POSTS_LIST_ERROR]: (state, action) => _objectSpread({}, state, {\n    postsList: asyncState.error(action.payload)\n  }),\n  [UPDATE_POST]: state => _objectSpread({}, state, {\n    reqPost: asyncState.loading()\n  }),\n  [UPDATE_POST_SUCCESS]: (state, action) => _objectSpread({}, state, {\n    reqPost: asyncState.success(action.payload)\n  }),\n  [UPDATE_POST_ERROR]: (state, action) => _objectSpread({}, state, {\n    reqPost: asyncState.error(action.payload)\n  }),\n  [GET_POST]: state => _objectSpread({}, state, {\n    post: asyncState.loading()\n  }),\n  [GET_POST_SUCCESS]: (state, action) => _objectSpread({}, state, {\n    post: asyncState.success(action.payload)\n  }),\n  [GET_POST_ERROR]: (state, action) => _objectSpread({}, state, {\n    post: asyncState.error(action.payload)\n  })\n}); // refactoring code\n\nconst test = createReducer(initialState).handleAction(transformToArray(getPostsListAsync), handleAsyncActions(getPostsListAsync, 'postsList'));\nexport default post;","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/store/modules/post/reducers.ts"],"names":["asyncState","transformToArray","handleAsyncActions","createReducer","getPostsListAsync","GET_POSTS_LIST","GET_POSTS_LIST_SUCCESS","GET_POSTS_LIST_ERROR","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_ERROR","GET_POST","GET_POST_SUCCESS","GET_POST_ERROR","initialState","postsList","initial","reqPost","post","state","loading","action","success","payload","error","test","handleAction"],"mappings":";;;;;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,gBAArB,EAAuCC,kBAAvC,QAAiE,iCAAjE;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SACCC,iBADD,EAGCC,cAHD,EAICC,sBAJD,EAKCC,oBALD,EAMCC,WAND,EAOCC,mBAPD,EAQCC,iBARD,EASCC,QATD,EAUCC,gBAVD,EAWCC,cAXD,QAYO,WAZP;AAcA,MAAMC,YAAuB,GAAG;AAC/BC,EAAAA,SAAS,EAAEf,UAAU,CAACgB,OAAX,EADoB;AAE/BC,EAAAA,OAAO,EAAEjB,UAAU,CAACgB,OAAX,EAFsB;AAG/BE,EAAAA,IAAI,EAAElB,UAAU,CAACgB,OAAX;AAHyB,CAAhC;AAKA,MAAME,IAAI,GAAGf,aAAa,CAAyBW,YAAzB,EAAuC;AAChE,GAACT,cAAD,GAAmBc,KAAD,sBACdA,KADc;AAEjBJ,IAAAA,SAAS,EAAEf,UAAU,CAACoB,OAAX;AAFM,IAD8C;AAKhE,GAACd,sBAAD,GAA0B,CAACa,KAAD,EAAQE,MAAR,KAAmB;AAC5C,6BACGF,KADH;AAEAJ,MAAAA,SAAS,EAAEf,UAAU,CAACsB,OAAX,CAAmBD,MAAM,CAACE,OAA1B;AAFX;AAGC,GAT8D;AAUhE,GAAChB,oBAAD,GAAwB,CAACY,KAAD,EAAQE,MAAR,uBACpBF,KADoB;AAEvBJ,IAAAA,SAAS,EAAEf,UAAU,CAACwB,KAAX,CAAiBH,MAAM,CAACE,OAAxB;AAFY,IAVwC;AAchE,GAACf,WAAD,GAAgBW,KAAD,sBACXA,KADW;AAEdF,IAAAA,OAAO,EAAEjB,UAAU,CAACoB,OAAX;AAFK,IAdiD;AAkBhE,GAACX,mBAAD,GAAuB,CAACU,KAAD,EAAQE,MAAR,uBACnBF,KADmB;AAEtBF,IAAAA,OAAO,EAAEjB,UAAU,CAACsB,OAAX,CAAmBD,MAAM,CAACE,OAA1B;AAFa,IAlByC;AAsBhE,GAACb,iBAAD,GAAqB,CAACS,KAAD,EAAQE,MAAR,uBACjBF,KADiB;AAEpBF,IAAAA,OAAO,EAAEjB,UAAU,CAACwB,KAAX,CAAiBH,MAAM,CAACE,OAAxB;AAFW,IAtB2C;AA0BhE,GAACZ,QAAD,GAAaQ,KAAD,sBACRA,KADQ;AAEXD,IAAAA,IAAI,EAAElB,UAAU,CAACoB,OAAX;AAFK,IA1BoD;AA8BhE,GAACR,gBAAD,GAAoB,CAACO,KAAD,EAAQE,MAAR,uBAChBF,KADgB;AAEnBD,IAAAA,IAAI,EAAElB,UAAU,CAACsB,OAAX,CAAmBD,MAAM,CAACE,OAA1B;AAFa,IA9B4C;AAkChE,GAACV,cAAD,GAAkB,CAACM,KAAD,EAAQE,MAAR,uBACdF,KADc;AAEjBD,IAAAA,IAAI,EAAElB,UAAU,CAACwB,KAAX,CAAiBH,MAAM,CAACE,OAAxB;AAFW;AAlC8C,CAAvC,CAA1B,C,CAwCA;;AACA,MAAME,IAAI,GAAGtB,aAAa,CAAyBW,YAAzB,CAAb,CAAoDY,YAApD,CACZzB,gBAAgB,CAACG,iBAAD,CADJ,EAEZF,kBAAkB,CAACE,iBAAD,EAAoB,WAApB,CAFN,CAAb;AAKA,eAAec,IAAf","sourcesContent":["import { asyncState, transformToArray, handleAsyncActions } from './../../../lib/Utils/asyncUtils';\r\nimport { PostState, PostActions, Post } from './types';\r\nimport { createReducer } from 'typesafe-actions';\r\nimport {\r\n\tgetPostsListAsync,\r\n\tpostAsync,\r\n\tGET_POSTS_LIST,\r\n\tGET_POSTS_LIST_SUCCESS,\r\n\tGET_POSTS_LIST_ERROR,\r\n\tUPDATE_POST,\r\n\tUPDATE_POST_SUCCESS,\r\n\tUPDATE_POST_ERROR,\r\n\tGET_POST,\r\n\tGET_POST_SUCCESS,\r\n\tGET_POST_ERROR\r\n} from './actions';\r\n\r\nconst initialState: PostState = {\r\n\tpostsList: asyncState.initial(),\r\n\treqPost: asyncState.initial(),\r\n\tpost: asyncState.initial(),\r\n};\r\nconst post = createReducer<PostState, PostActions>(initialState, {\r\n\t[GET_POSTS_LIST]: (state) => ({\r\n\t\t...state,\r\n\t\tpostsList: asyncState.loading()\r\n\t}),\r\n\t[GET_POSTS_LIST_SUCCESS]: (state, action) => {\r\n\t\treturn {\r\n\t\t...state,\r\n\t\tpostsList: asyncState.success(action.payload)\r\n\t}},\r\n\t[GET_POSTS_LIST_ERROR]: (state, action) => ({\r\n\t\t...state,\r\n\t\tpostsList: asyncState.error(action.payload)\r\n\t}),\r\n\t[UPDATE_POST]: (state) => ({\r\n\t\t...state,\r\n\t\treqPost: asyncState.loading()\r\n\t}),\r\n\t[UPDATE_POST_SUCCESS]: (state, action) => ({\r\n\t\t...state,\r\n\t\treqPost: asyncState.success(action.payload)\r\n\t}),\r\n\t[UPDATE_POST_ERROR]: (state, action) => ({\r\n\t\t...state,\r\n\t\treqPost: asyncState.error(action.payload)\r\n\t}),\r\n\t[GET_POST]: (state) => ({\r\n\t\t...state,\r\n\t\tpost: asyncState.loading(),\r\n\t}),\r\n\t[GET_POST_SUCCESS]: (state, action) => ({\r\n\t\t...state,\r\n\t\tpost: asyncState.success(action.payload)\r\n\t}),\r\n\t[GET_POST_ERROR]: (state, action) => ({\r\n\t\t...state,\r\n\t\tpost: asyncState.error(action.payload)\r\n\t})\r\n});\r\n\r\n// refactoring code\r\nconst test = createReducer<PostState, PostActions>(initialState).handleAction(\r\n\ttransformToArray(getPostsListAsync),\r\n\thandleAsyncActions(getPostsListAsync, 'postsList')\r\n);\r\n\r\nexport default post;\r\n"]},"metadata":{},"sourceType":"module"}