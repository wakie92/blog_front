{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport { createStore, applyMiddleware, Store } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (process.env.NODE_ENV !== 'production') {\n    var _require = require('redux-devtools-extension'),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nfunction configureStore(preloadedState, _ref) {\n  var isServer = _ref.isServer,\n      _ref$req = _ref.req,\n      req = _ref$req === void 0 ? null : _ref$req;\n  var sagaMiddleware = createSagaMiddleware();\n  var store = createStore(rootReducer, preloadedState, bindMiddleware([sagaMiddleware]));\n\n  if (req || !isServer) {\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n  }\n\n  return store;\n}\n\nexport default configureStore;","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/store/configureStore.js"],"names":["createStore","applyMiddleware","Store","createSagaMiddleware","rootReducer","rootSaga","bindMiddleware","middleware","process","env","NODE_ENV","require","composeWithDevTools","configureStore","preloadedState","isServer","req","sagaMiddleware","store","sagaTask","run"],"mappings":";AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,KAAtC,QAAkD,OAAlD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP,IAAsBC,QAAtB,QAAsC,WAAtC;;AAGA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,UAAU,EAAI;AACnC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAAA,mBACTC,OAAO,CAAC,0BAAD,CADE;AAAA,QACjCC,mBADiC,YACjCA,mBADiC;;AAEzC,WAAOA,mBAAmB,CAACX,eAAe,MAAf,4BAAmBM,UAAnB,EAAD,CAA1B;AACD;;AACD,SAAON,eAAe,MAAf,4BAAmBM,UAAnB,EAAP;AACD,CAND;;AAQA,SAASM,cAAT,CAAwBC,cAAxB,QAAgE;AAAA,MAAvBC,QAAuB,QAAvBA,QAAuB;AAAA,sBAAbC,GAAa;AAAA,MAAbA,GAAa,yBAAP,IAAO;AAC9D,MAAMC,cAAc,GAAGd,oBAAoB,EAA3C;AACA,MAAMe,KAAK,GAAGlB,WAAW,CACvBI,WADuB,EAEvBU,cAFuB,EAGvBR,cAAc,CAAC,CAACW,cAAD,CAAD,CAHS,CAAzB;;AAKA,MAAID,GAAG,IAAI,CAACD,QAAZ,EAAsB;AACpBG,IAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBf,QAAnB,CAAjB;AACD;;AACD,SAAOa,KAAP;AACD;;AAED,eAAeL,cAAf","sourcesContent":["import {createStore, applyMiddleware, Store} from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootReducer, { rootSaga } from './modules'\r\n \r\n\r\nconst bindMiddleware = middleware => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const { composeWithDevTools } = require('redux-devtools-extension')\r\n    return composeWithDevTools(applyMiddleware(...middleware))\r\n  }\r\n  return applyMiddleware(...middleware)\r\n}\r\n\r\nfunction configureStore(preloadedState, {isServer, req = null}) {\r\n  const sagaMiddleware = createSagaMiddleware()\r\n  const store = createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    bindMiddleware([sagaMiddleware])\r\n  )\r\n  if (req || !isServer) {\r\n    store.sagaTask = sagaMiddleware.run(rootSaga)\r\n  }\r\n  return store\r\n}\r\n \r\nexport default configureStore"]},"metadata":{},"sourceType":"module"}