{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectDestructuringEmpty from \"@babel/runtime-corejs2/helpers/esm/objectDestructuringEmpty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { getPostAsync } from '../../../store/modules/post';\nimport Maybe from '../../../components/Maybe/Maybe';\nimport BlogPostContainer from '../../../containers/BlogPost/BlogPostContainer';\nimport { useSelector } from 'react-redux';\nimport EditContainer from '../../../containers/Edit/EditContainer';\nimport PostSeo from '../../../components/Posts/PostView/PostSeo';\n\nvar post = function post(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var _useState = useState(false),\n      editMode = _useState[0],\n      setEditMode = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      postData: state.post.post\n    };\n  }),\n      postData = _useSelector.postData;\n\n  return __jsx(React.Fragment, null, __jsx(PostSeo, {\n    data: postData.data\n  }), __jsx(Maybe, {\n    isVisible: editMode\n  }, __jsx(EditContainer, {\n    editMode: editMode\n  })), __jsx(Maybe, {\n    isVisible: !editMode\n  }, __jsx(BlogPostContainer, {\n    editMode: editMode,\n    setEditMode: setEditMode\n  })));\n};\n\npost.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref2) {\n    var store, isServer, query, id;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            store = _ref2.store, isServer = _ref2.isServer, query = _ref2.query;\n            id = query.id;\n\n            if (!isServer) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 5;\n            return store.dispatch(getPostAsync.request(id));\n\n          case 5:\n            return _context.abrupt(\"return\", {});\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default post;","map":null,"metadata":{},"sourceType":"module"}