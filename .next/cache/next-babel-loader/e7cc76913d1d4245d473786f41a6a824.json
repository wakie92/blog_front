{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport PostView from '../../components/Posts/PostView/PostView';\nimport { deletePostAsync } from '../../store/modules/post';\nimport Footer from '../../components/CommonUI/Footer';\n\nvar BlogPostContainer = function BlogPostContainer(_ref) {\n  var editMode = _ref.editMode,\n      setEditMode = _ref.setEditMode;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      postData: state.post.post,\n      isLogged: state.loginUI.isLogged\n    };\n  }),\n      postData = _useSelector.postData,\n      isLogged = _useSelector.isLogged;\n\n  var router = useRouter();\n  var reqDeletePost = useCallback(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch(deletePostAsync.request(postData.data.resId));\n            _context.next = 7;\n            break;\n\n          case 4:\n            _context.prev = 4;\n            _context.t0 = _context[\"catch\"](0);\n            throw _context.t0;\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 4]]);\n  })), [dispatch]);\n  console.log(postData.data);\n  return __jsx(React.Fragment, null, __jsx(PostView, {\n    isLogged: isLogged,\n    reqDeletePost: reqDeletePost,\n    postData: postData,\n    editMode: editMode,\n    setEditMode: setEditMode\n  }), __jsx(Footer, null));\n};\n\nexport default BlogPostContainer;","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/containers/BlogPost/BlogPostContainer.tsx"],"names":["BlogPostContainer","editMode","setEditMode","dispatch","useDispatch","postData","isLogged","useSelector","state","router","useRouter","reqDeletePost","useCallback","deletePostAsync","console"],"mappings":";;;;AAAA,SAAA,WAAA,EAAA,WAAA,QAAA,aAAA;AACA,SAAA,WAAA,QAAA,OAAA;AACA,SAAA,SAAA,QAAA,aAAA;AACA,OAAA,QAAA,MAAA,0CAAA;AACA,SAAA,eAAA,QAAA,0BAAA;AACA,OAAA,MAAA,MAAA,kCAAA;;AAQA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,IAAA,EAA8C;AAAA,MAA3CC,QAA2C,GAAA,IAAA,CAA3CA,QAA2C;AAAA,MAAjCC,WAAiC,GAAA,IAAA,CAAjCA,WAAiC;AACtE,MAAMC,QAAQ,GAAGC,WAAjB,EAAA;;AADsE,MAAA,YAAA,GAEvCG,WAAW,CAAC,UAAA,KAAA,EAAA;AAAA,WAA0B;AACnEF,MAAAA,QAAQ,EAAEG,KAAK,CAALA,IAAAA,CADyD,IAAA;AAEnEF,MAAAA,QAAQ,EAAEE,KAAK,CAALA,OAAAA,CAAcF;AAF2C,KAA1B;AAF2B,GAE5B,CAF4B;AAAA,MAE9DD,QAF8D,GAAA,YAAA,CAAA,QAAA;AAAA,MAEpDC,QAFoD,GAAA,YAAA,CAAA,QAAA;;AAMtE,MAAMG,MAAM,GAAGC,SAAf,EAAA;AAEA,MAAMC,aAAa,GAAGC,WAAW;AAAA;AAAA,EAAA,iBAAA;AAAA;AAAA,EAAA,mBAAA,CAAA,IAAA,CAAC,SAAA,OAAA,GAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAE9BT,YAAAA,QAAQ,CAACU,eAAe,CAAfA,OAAAA,CAAwBR,QAAQ,CAARA,IAAAA,CAAjCF,KAASU,CAAD,CAARV;AAF8B,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAAA,kBAAA,QAAA,CAAA,EAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AAAD,GAAA,CAAA,CAAA,EAM9B,CANH,QAMG,CAN8B,CAAjC;AAQAW,EAAAA,OAAO,CAAPA,GAAAA,CAAYT,QAAQ,CAApBS,IAAAA;AACA,SACE,KAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,QAAA,EAAA;AACE,IAAA,QAAQ,EADV,QAAA;AAEE,IAAA,aAAa,EAFf,aAAA;AAGE,IAAA,QAAQ,EAHV,QAAA;AAIE,IAAA,QAAQ,EAJV,QAAA;AAKE,IAAA,WAAW,EAAEZ;AALf,GAAA,CADF,EAQE,KAAA,CAAA,MAAA,EATJ,IASI,CARF,CADF;AAjBF,CAAA;;AA+BA,eAAA,iBAAA","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\nimport { useCallback, Dispatch, SetStateAction } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport PostView from '../../components/Posts/PostView/PostView';\r\nimport { deletePostAsync } from '../../store/modules/post';\r\nimport Footer from '../../components/CommonUI/Footer';\r\nimport HeaderContainer from '../Header/HeaderContainer';\r\nimport { RootState } from '../../store/modules';\r\n\r\ntype BlogPostProps = {\r\n  editMode: boolean;\r\n  setEditMode: Dispatch<SetStateAction<boolean>>; \r\n};\r\nconst BlogPostContainer = ({ editMode, setEditMode }: BlogPostProps) => {\r\n  const dispatch = useDispatch();\r\n  const { postData, isLogged } = useSelector(( state : RootState ) => ({\r\n    postData: state.post.post,\r\n    isLogged: state.loginUI.isLogged\r\n  }))\r\n  const router = useRouter();\r\n\r\n  const reqDeletePost = useCallback(async () => {\r\n    try {\r\n      dispatch(deletePostAsync.request(postData.data.resId));\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }, [dispatch]);\r\n\r\n  console.log(postData.data);\r\n  return (\r\n    <>\r\n      <PostView \r\n        isLogged={isLogged} \r\n        reqDeletePost={reqDeletePost} \r\n        postData={postData} \r\n        editMode={editMode} \r\n        setEditMode={setEditMode} \r\n      />\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BlogPostContainer;"]},"metadata":{},"sourceType":"module"}