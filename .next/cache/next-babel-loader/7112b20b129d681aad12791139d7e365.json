{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, createReducer } from 'typesafe-actions';\nconst SET_INPUT_VALUES = 'post/SET_INPUT_VALUES';\nconst INPUT_VALUE = 'post/INPUT_VALUE';\nconst RESET_INPUT_VALUE = 'post/RESET_INPUT_VALUE';\nconst ADD_TAG_ARR = 'post/ADD_TAG_ARR';\nexport const addTagArr = createAction(ADD_TAG_ARR)();\nexport const getValue = createAction(INPUT_VALUE, ({\n  name,\n  value\n}) => ({\n  name,\n  value\n}))();\nexport const resetInputValue = createAction(RESET_INPUT_VALUE)();\nexport const setInputValues = createAction(SET_INPUT_VALUES, ({\n  title,\n  inputValue,\n  mdValue,\n  imgUrl,\n  subTitle,\n  tagArr,\n  tag\n}) => ({\n  title,\n  inputValue,\n  mdValue,\n  imgUrl,\n  tagArr,\n  subTitle,\n  tag\n}))();\nconst actions = {\n  getValue,\n  resetInputValue,\n  setInputValues,\n  addTagArr\n};\nconst initialState = {\n  postWrite: {\n    title: '',\n    inputValue: '',\n    mdValue: '',\n    subTitle: '',\n    imgUrl: null,\n    tagArr: [],\n    tag: ''\n  }\n};\nconst post = createReducer(initialState, {\n  [SET_INPUT_VALUES]: (state, action) => {\n    return _objectSpread({}, state, {\n      postWrite: action.payload\n    });\n  },\n  [RESET_INPUT_VALUE]: (state, action) => {\n    return _objectSpread({}, state, {\n      postWrite: {\n        title: '',\n        inputValue: '',\n        mdValue: '',\n        subTitle: '',\n        imgUrl: null,\n        tagArr: [],\n        tag: ''\n      }\n    });\n  },\n  [INPUT_VALUE]: (state, {\n    payload: {\n      name,\n      value\n    }\n  }) => {\n    return _objectSpread({}, state, {\n      postWrite: _objectSpread({}, state.postWrite, {\n        [name]: value\n      })\n    });\n  },\n  [ADD_TAG_ARR]: (state, action) => {\n    const {\n      tagArr,\n      tag\n    } = state.postWrite;\n    const addTagArr = tagArr.concat(tag.replace(',', ''));\n    return _objectSpread({}, state, {\n      postWrite: _objectSpread({}, state.postWrite, {\n        tagArr: addTagArr,\n        tag: ''\n      })\n    });\n  }\n});\nexport default post;","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/store/modules/postUI.ts"],"names":["createAction","createReducer","SET_INPUT_VALUES","INPUT_VALUE","RESET_INPUT_VALUE","ADD_TAG_ARR","addTagArr","getValue","name","value","resetInputValue","setInputValues","title","inputValue","mdValue","imgUrl","subTitle","tagArr","tag","actions","initialState","postWrite","post","state","action","payload","concat","replace"],"mappings":"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","sourcesContent":["import { createAction, ActionType, createReducer } from 'typesafe-actions';\r\nimport { updateKey } from './loginUI';\r\n\r\nconst SET_INPUT_VALUES = 'post/SET_INPUT_VALUES';\r\nconst INPUT_VALUE = 'post/INPUT_VALUE';\r\nconst RESET_INPUT_VALUE = 'post/RESET_INPUT_VALUE';\r\nconst ADD_TAG_ARR = 'post/ADD_TAG_ARR';\r\n\r\nexport const addTagArr = createAction(ADD_TAG_ARR)<null>();\r\nexport const getValue = createAction(INPUT_VALUE, ({ name, value }: updateKey) => ({\r\n\tname,\r\n\tvalue\r\n}))<updateKey>();\r\n\r\nexport const resetInputValue = createAction(RESET_INPUT_VALUE)<null>();\r\nexport const setInputValues = createAction(SET_INPUT_VALUES, \r\n\t({ title, inputValue, mdValue, imgUrl, subTitle, tagArr, tag }: PostWrite) => ({\r\n\ttitle,\r\n\tinputValue,\r\n\tmdValue,\r\n\timgUrl,\r\n\ttagArr,\r\n\tsubTitle,\r\n\ttag\r\n}))<PostWrite>();\r\n\r\nconst actions = {\r\n\tgetValue,\r\n\tresetInputValue,\r\n\tsetInputValues,\r\n\taddTagArr,\r\n};\r\n\r\nexport type PostActions = ActionType<typeof actions>;\r\n\r\nexport type PostWrite = {\r\n\ttitle: string;\r\n\tinputValue: string;\r\n\tmdValue: string;\r\n\timgUrl: null | string;\r\n\tsubTitle: string;\r\n\ttagArr: string[] ;\r\n\ttag: string;\r\n};\r\n\r\nexport type PostState = {\r\n\tpostWrite: PostWrite;\r\n};\r\n\r\nconst initialState: PostState = {\r\n\tpostWrite: {\r\n\t\ttitle: '',\r\n\t\tinputValue: '',\r\n\t\tmdValue: '',\r\n\t\tsubTitle:'',\r\n\t\timgUrl: null,\r\n\t\ttagArr: [],\r\n\t\ttag: '',\r\n\t}\r\n};\r\n\r\nconst post = createReducer<PostState, PostActions>(initialState, {\r\n\t[SET_INPUT_VALUES]: (state, action) => {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tpostWrite: action.payload\r\n\t\t};\r\n\t},\r\n\t[RESET_INPUT_VALUE]: (state, action) => {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tpostWrite: {\r\n\t\t\t\ttitle: '',\r\n\t\t\t\tinputValue: '',\r\n\t\t\t\tmdValue: '',\r\n\t\t\t\tsubTitle:'',\r\n\t\t\t\timgUrl: null,\r\n\t\t\t\ttagArr: [],\r\n\t\t\t\ttag: ''\r\n\t\t\t}\r\n\t\t};\r\n\t},\r\n\t[INPUT_VALUE]: (state, { payload: { name, value } }) => {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tpostWrite: {\r\n\t\t\t\t...state.postWrite,\r\n\t\t\t\t[name]: value\r\n\t\t\t}\r\n\t\t};\r\n\t},\r\n\t[ADD_TAG_ARR]: (state, action) => {\r\n\t\tconst{ tagArr, tag } = state.postWrite\r\n\t\tconst addTagArr = tagArr.concat(tag.replace(',', ''));\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tpostWrite: {\r\n\t\t\t\t...state.postWrite,\r\n\t\t\t\ttagArr: addTagArr,\r\n\t\t\t\ttag: '',\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport default post;\r\n"]},"metadata":{},"sourceType":"module"}