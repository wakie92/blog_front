{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getOnePostSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(putSaga),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteSaga);\n\nimport { getPostsListAsync, GET_POSTS_LIST, EDIT_POST, putPostAsync, postAsync, UPDATE_POST, getPostAsync, GET_POST, deletePostAsync, DELETE_POST } from './actions';\nimport { GetPostsList, PostUpdate, GetPost, PutPost, DeletePost } from '../../../lib/api/apis';\nimport { takeEvery, takeLatest } from 'redux-saga/effects';\nimport createAsyncSaga from '../../../lib/Utils/createAsyncSaga';\nvar deletePostSaga = createAsyncSaga(deletePostAsync, DeletePost);\nvar putPostSaga = createAsyncSaga(putPostAsync, PutPost);\nvar postUpdateSaga = createAsyncSaga(postAsync, PostUpdate);\nvar getPostsListSaga = createAsyncSaga(getPostsListAsync, GetPostsList);\nvar getPostSaga = createAsyncSaga(getPostAsync, GetPost);\nexport function updateSaga() {\n  return _regeneratorRuntime.wrap(function updateSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(UPDATE_POST, postUpdateSaga);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(GET_POSTS_LIST, getPostsListSaga);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function getOnePostSaga() {\n  return _regeneratorRuntime.wrap(function getOnePostSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(GET_POST, getPostSaga);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function putSaga() {\n  return _regeneratorRuntime.wrap(function putSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(EDIT_POST, putPostSaga);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function deleteSaga() {\n  return _regeneratorRuntime.wrap(function deleteSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(DELETE_POST, deletePostSaga);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":null,"metadata":{},"sourceType":"module"}