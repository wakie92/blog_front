{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { firebaseDB } from '../../configs/init-firebase';\nvar db = firebaseDB().firestore();\nvar blogDB = db.collection(\"blogDB\");\nexport var GetPostsList =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(cnt) {\n    var query, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // const user = firebase.auth().currentUser\n            query = blogDB.orderBy(\"date\", \"desc\").limit(cnt);\n            _context.next = 3;\n            return query.get().then(function (querySnapshot) {\n              return querySnapshot.docs.map(function (data) {\n                var ele = _objectSpread({}, data.data(), {\n                  id: data.id\n                });\n\n                return ele;\n              });\n            })[\"catch\"](function (e) {\n              return console.log(e);\n            });\n\n          case 3:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function GetPostsList(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var PutPost =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(_ref2) {\n    var post, id, query, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            post = _ref2.post, id = _ref2.id;\n            query = blogDB.doc(id);\n            _context2.next = 4;\n            return query.set(post).then(function (res) {\n              return 'success';\n            })[\"catch\"](function (err) {\n              return err;\n            });\n\n          case 4:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response.data);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function PutPost(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var PostUpdate =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(data) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return blogDB.add(data).then(function (res) {\n              return res.id;\n            })[\"catch\"](function (err) {\n              return err;\n            });\n\n          case 2:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function PostUpdate(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var GetPost =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(index) {\n    var query, response;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            query = blogDB.doc(index);\n            _context4.next = 3;\n            return query.get().then(function (doc) {\n              return {\n                res: _objectSpread({}, doc.data(), {\n                  id: doc.id\n                }),\n                resId: doc.id\n              };\n            });\n\n          case 3:\n            response = _context4.sent;\n            return _context4.abrupt(\"return\", response);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function GetPost(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var DeletePost =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(id) {\n    var query, response;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            query = blogDB.doc(id);\n            _context5.next = 3;\n            return query[\"delete\"]().then(function () {\n              return 'success';\n            })[\"catch\"](function (err) {\n              return err;\n            });\n\n          case 3:\n            response = _context5.sent;\n            return _context5.abrupt(\"return\", response);\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function DeletePost(_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/lib/api/apis.ts"],"names":["firebaseDB","db","firestore","blogDB","collection","GetPostsList","cnt","query","orderBy","limit","get","then","querySnapshot","docs","map","data","ele","id","e","console","log","response","PutPost","post","doc","set","res","err","PostUpdate","add","GetPost","index","resId","DeletePost"],"mappings":"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","sourcesContent":["import { Post, PutPostType } from './../../store/modules/post/types';\r\nimport { firebaseDB } from '../../configs/init-firebase';\r\n\r\nconst db = firebaseDB().firestore();\r\nconst blogDB = db.collection(\"blogDB\");\r\n\r\nexport const GetPostsList = async <T>(cnt: number): Promise<T[]> => {\r\n\t// const user = firebase.auth().currentUser\r\n\tconst query = blogDB.orderBy(\"date\", \"desc\").limit(cnt);\r\n\tconst response: T[] = await query.get().then((querySnapshot) => {\r\n\t\t\treturn querySnapshot.docs.map((data) => {\r\n\t\t\t\tconst ele: T = { ...data.data(), id: data.id } as unknown as T;\r\n\t\t\t\treturn ele;\r\n\t\t\t});\r\n\t\t}).catch((e) =>  console.log(e)) as T[];\r\n\treturn response;\r\n};\r\n\r\nexport const PutPost = async ({post, id}: PutPostType) => {\r\n\tconst query = blogDB.doc(id);\r\n\tconst response = await query.set(post).then((res) => {\r\n\t\treturn 'success';\r\n\t}).catch((err) => {\r\n\t\treturn err;\r\n\t});\r\n\treturn response.data;\r\n};\r\n\r\nexport const PostUpdate = async (data: Post) => {\r\n\tconst response: string = await blogDB.add(data)\r\n\t\t.then((res) => {\r\n\t\t\treturn res.id;\r\n\t\t}).catch((err) => {\r\n\t\t\treturn err;\r\n\t\t});\r\n\treturn response;\r\n};\r\n\r\nexport const GetPost = async (index: string) => {\r\n\tconst query = blogDB.doc(index);\r\n\tconst response = await query.get().then((doc) => {\r\n\t\treturn { \r\n\t\t\tres: { ...doc.data(), id: doc.id } as unknown as Post, \r\n\t\t\tresId: doc.id \r\n\t\t};\r\n\t});\r\n\treturn response;\t\r\n};\r\n\r\nexport const DeletePost = async (id: string) => {\r\n\tconst query = blogDB.doc(id);\r\n\tconst response = await query.delete().then(() => {\r\n\t\treturn 'success';\r\n\t}).catch((err) => {\r\n\t\treturn err;\r\n\t})\r\n\treturn response;\r\n};\r\n\r\nexport type LoginType = {\r\n\tmessage: string;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}