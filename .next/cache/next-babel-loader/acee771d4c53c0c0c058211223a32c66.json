{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { firebaseDB } from '../../configs/init-firebase';\nconst db = firebaseDB().firestore();\nconst blogDB = db.collection(\"blogDB\");\nexport const GetPostsList = async cnt => {\n  // const user = firebase.auth().currentUser\n  const query = blogDB.orderBy(\"date\", \"desc\").limit(cnt);\n  const response = await query.get().then(querySnapshot => {\n    return querySnapshot.docs.map(data => {\n      const ele = _objectSpread({}, data.data(), {\n        id: data.id\n      });\n\n      return ele;\n    });\n  }).catch(e => console.log(e));\n  return response;\n};\nexport const PutPost = async ({\n  post,\n  id\n}) => {\n  const query = blogDB.doc(id);\n  const response = await query.set(post).then(res => {\n    return 'success';\n  }).catch(err => {\n    return err;\n  });\n  return response.data;\n};\nexport const PostUpdate = async data => {\n  const response = await blogDB.add(data).then(res => {\n    return res.id;\n  }).catch(err => {\n    return err;\n  });\n  return response;\n};\nexport const GetPost = async index => {\n  const query = blogDB.doc(index);\n  const response = await query.get().then(doc => {\n    return {\n      res: _objectSpread({}, doc.data(), {\n        id: doc.id\n      }),\n      resId: doc.id\n    };\n  });\n  return response;\n};\nexport const DeletePost = async id => {\n  const query = blogDB.doc(id);\n  const response = await query.delete().then(() => {\n    return 'success';\n  }).catch(err => {\n    return err;\n  });\n  return response;\n};","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/lib/api/apis.ts"],"names":["firebaseDB","db","firestore","blogDB","collection","GetPostsList","cnt","query","orderBy","limit","response","get","then","querySnapshot","docs","map","data","ele","id","catch","e","console","log","PutPost","post","doc","set","res","err","PostUpdate","add","GetPost","index","resId","DeletePost","delete"],"mappings":";;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,6BAA3B;AAEA,MAAMC,EAAE,GAAGD,UAAU,GAAGE,SAAb,EAAX;AACA,MAAMC,MAAM,GAAGF,EAAE,CAACG,UAAH,CAAc,QAAd,CAAf;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAUC,GAAV,IAAwC;AACnE;AACA,QAAMC,KAAK,GAAGJ,MAAM,CAACK,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BC,KAA/B,CAAqCH,GAArC,CAAd;AACA,QAAMI,QAAa,GAAG,MAAMH,KAAK,CAACI,GAAN,GAAYC,IAAZ,CAAkBC,aAAD,IAAmB;AAC9D,WAAOA,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAwBC,IAAD,IAAU;AACvC,YAAMC,GAAM,qBAAQD,IAAI,CAACA,IAAL,EAAR;AAAqBE,QAAAA,EAAE,EAAEF,IAAI,CAACE;AAA9B,QAAZ;;AACA,aAAOD,GAAP;AACA,KAHM,CAAP;AAIA,GAL0B,EAKxBE,KALwB,CAKjBC,CAAD,IAAQC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CALU,CAA5B;AAMA,SAAOV,QAAP;AACA,CAVM;AAYP,OAAO,MAAMa,OAAO,GAAG,OAAO;AAACC,EAAAA,IAAD;AAAON,EAAAA;AAAP,CAAP,KAAmC;AACzD,QAAMX,KAAK,GAAGJ,MAAM,CAACsB,GAAP,CAAWP,EAAX,CAAd;AACA,QAAMR,QAAQ,GAAG,MAAMH,KAAK,CAACmB,GAAN,CAAUF,IAAV,EAAgBZ,IAAhB,CAAsBe,GAAD,IAAS;AACpD,WAAO,SAAP;AACA,GAFsB,EAEpBR,KAFoB,CAEbS,GAAD,IAAS;AACjB,WAAOA,GAAP;AACA,GAJsB,CAAvB;AAKA,SAAOlB,QAAQ,CAACM,IAAhB;AACA,CARM;AAUP,OAAO,MAAMa,UAAU,GAAG,MAAOb,IAAP,IAAsB;AAC/C,QAAMN,QAAgB,GAAG,MAAMP,MAAM,CAAC2B,GAAP,CAAWd,IAAX,EAC7BJ,IAD6B,CACvBe,GAAD,IAAS;AACd,WAAOA,GAAG,CAACT,EAAX;AACA,GAH6B,EAG3BC,KAH2B,CAGpBS,GAAD,IAAS;AACjB,WAAOA,GAAP;AACA,GAL6B,CAA/B;AAMA,SAAOlB,QAAP;AACA,CARM;AAUP,OAAO,MAAMqB,OAAO,GAAG,MAAOC,KAAP,IAAyB;AAC/C,QAAMzB,KAAK,GAAGJ,MAAM,CAACsB,GAAP,CAAWO,KAAX,CAAd;AACA,QAAMtB,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAN,GAAYC,IAAZ,CAAkBa,GAAD,IAAS;AAChD,WAAO;AACNE,MAAAA,GAAG,oBAAOF,GAAG,CAACT,IAAJ,EAAP;AAAmBE,QAAAA,EAAE,EAAEO,GAAG,CAACP;AAA3B,QADG;AAENe,MAAAA,KAAK,EAAER,GAAG,CAACP;AAFL,KAAP;AAIA,GALsB,CAAvB;AAMA,SAAOR,QAAP;AACA,CATM;AAWP,OAAO,MAAMwB,UAAU,GAAG,MAAOhB,EAAP,IAAsB;AAC/C,QAAMX,KAAK,GAAGJ,MAAM,CAACsB,GAAP,CAAWP,EAAX,CAAd;AACA,QAAMR,QAAQ,GAAG,MAAMH,KAAK,CAAC4B,MAAN,GAAevB,IAAf,CAAoB,MAAM;AAChD,WAAO,SAAP;AACA,GAFsB,EAEpBO,KAFoB,CAEbS,GAAD,IAAS;AACjB,WAAOA,GAAP;AACA,GAJsB,CAAvB;AAKA,SAAOlB,QAAP;AACA,CARM","sourcesContent":["import { Post, PutPostType } from './../../store/modules/post/types';\r\nimport { firebaseDB } from '../../configs/init-firebase';\r\n\r\nconst db = firebaseDB().firestore();\r\nconst blogDB = db.collection(\"blogDB\");\r\n\r\nexport const GetPostsList = async <T>(cnt: number): Promise<T[]> => {\r\n\t// const user = firebase.auth().currentUser\r\n\tconst query = blogDB.orderBy(\"date\", \"desc\").limit(cnt);\r\n\tconst response: T[] = await query.get().then((querySnapshot) => {\r\n\t\t\treturn querySnapshot.docs.map((data) => {\r\n\t\t\t\tconst ele: T = { ...data.data(), id: data.id } as unknown as T;\r\n\t\t\t\treturn ele;\r\n\t\t\t});\r\n\t\t}).catch((e) =>  console.log(e)) as T[];\r\n\treturn response;\r\n};\r\n\r\nexport const PutPost = async ({post, id}: PutPostType) => {\r\n\tconst query = blogDB.doc(id);\r\n\tconst response = await query.set(post).then((res) => {\r\n\t\treturn 'success';\r\n\t}).catch((err) => {\r\n\t\treturn err;\r\n\t});\r\n\treturn response.data;\r\n};\r\n\r\nexport const PostUpdate = async (data: Post) => {\r\n\tconst response: string = await blogDB.add(data)\r\n\t\t.then((res) => {\r\n\t\t\treturn res.id;\r\n\t\t}).catch((err) => {\r\n\t\t\treturn err;\r\n\t\t});\r\n\treturn response;\r\n};\r\n\r\nexport const GetPost = async (index: string) => {\r\n\tconst query = blogDB.doc(index);\r\n\tconst response = await query.get().then((doc) => {\r\n\t\treturn { \r\n\t\t\tres: { ...doc.data(), id: doc.id } as unknown as Post, \r\n\t\t\tresId: doc.id \r\n\t\t};\r\n\t});\r\n\treturn response;\t\r\n};\r\n\r\nexport const DeletePost = async (id: string) => {\r\n\tconst query = blogDB.doc(id);\r\n\tconst response = await query.delete().then(() => {\r\n\t\treturn 'success';\r\n\t}).catch((err) => {\r\n\t\treturn err;\r\n\t})\r\n\treturn response;\r\n};\r\n\r\nexport type LoginType = {\r\n\tmessage: string;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}