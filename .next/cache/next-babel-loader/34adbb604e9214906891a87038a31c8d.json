{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { getType } from 'typesafe-actions';\nexport var asyncState = {\n  initial: function initial(initialData) {\n    return {\n      loading: false,\n      data: initialData || null,\n      error: null\n    };\n  },\n  loading: function loading(data) {\n    return {\n      loading: true,\n      data: data || null,\n      error: null\n    };\n  },\n  success: function success(data) {\n    return {\n      loading: false,\n      data: data,\n      error: null\n    };\n  },\n  error: function error(_error) {\n    return {\n      loading: false,\n      data: null,\n      error: _error\n    };\n  }\n};\nexport function transformToArray(asyncActionCreator) {\n  var request = asyncActionCreator.request,\n      success = asyncActionCreator.success,\n      failure = asyncActionCreator.failure;\n  return [request, success, failure];\n}\nexport var handleAsyncActions = function handleAsyncActions(type, key) {\n  return function (state, action) {\n    var _transformToArray$map = transformToArray(type).map(getType),\n        _transformToArray$map2 = _slicedToArray(_transformToArray$map, 3),\n        request = _transformToArray$map2[0],\n        success = _transformToArray$map2[1],\n        failure = _transformToArray$map2[2];\n\n    switch (action.type) {\n      case request:\n        return _objectSpread({}, state, _defineProperty({}, key, asyncState.loading()));\n\n      case success:\n        return _objectSpread({}, state, _defineProperty({}, key, asyncState.success(action.payload)));\n\n      case failure:\n        return _objectSpread({}, state, _defineProperty({}, key, asyncState.error(action.payload)));\n\n      default:\n        return state;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}