{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _createReducer;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { createAction, createReducer } from 'typesafe-actions';\nvar SET_INPUT_VALUES = 'post/SET_INPUT_VALUES';\nvar INPUT_VALUE = 'post/INPUT_VALUE';\nvar RESET_INPUT_VALUE = 'post/RESET_INPUT_VALUE';\nvar ADD_TAG_ARR = 'post/ADD_TAG_ARR';\nexport var addTagArr = createAction(ADD_TAG_ARR)();\nexport var getValue = createAction(INPUT_VALUE, function (_ref) {\n  var name = _ref.name,\n      value = _ref.value;\n  return {\n    name: name,\n    value: value\n  };\n})();\nexport var resetInputValue = createAction(RESET_INPUT_VALUE)();\nexport var setInputValues = createAction(SET_INPUT_VALUES, function (_ref2) {\n  var title = _ref2.title,\n      inputValue = _ref2.inputValue,\n      mdValue = _ref2.mdValue,\n      imgUrl = _ref2.imgUrl,\n      subTitle = _ref2.subTitle,\n      tagArr = _ref2.tagArr,\n      tag = _ref2.tag;\n  return {\n    title: title,\n    inputValue: inputValue,\n    mdValue: mdValue,\n    imgUrl: imgUrl,\n    tagArr: tagArr,\n    subTitle: subTitle,\n    tag: tag\n  };\n})();\nvar actions = {\n  getValue: getValue,\n  resetInputValue: resetInputValue,\n  setInputValues: setInputValues,\n  addTagArr: addTagArr\n};\nvar initialState = {\n  postWrite: {\n    title: '',\n    inputValue: '',\n    mdValue: '',\n    subTitle: '',\n    imgUrl: null,\n    tagArr: [],\n    tag: ''\n  }\n};\nvar post = createReducer(initialState, (_createReducer = {}, _defineProperty(_createReducer, SET_INPUT_VALUES, function (state, action) {\n  return _objectSpread({}, state, {\n    postWrite: action.payload\n  });\n}), _defineProperty(_createReducer, RESET_INPUT_VALUE, function (state, action) {\n  return _objectSpread({}, state, {\n    postWrite: {\n      title: '',\n      inputValue: '',\n      mdValue: '',\n      subTitle: '',\n      imgUrl: null,\n      tagArr: [],\n      tag: ''\n    }\n  });\n}), _defineProperty(_createReducer, INPUT_VALUE, function (state, _ref3) {\n  var _ref3$payload = _ref3.payload,\n      name = _ref3$payload.name,\n      value = _ref3$payload.value;\n  return _objectSpread({}, state, {\n    postWrite: _objectSpread({}, state.postWrite, _defineProperty({}, name, value))\n  });\n}), _defineProperty(_createReducer, ADD_TAG_ARR, function (state, action) {\n  var _state$postWrite = state.postWrite,\n      tagArr = _state$postWrite.tagArr,\n      tag = _state$postWrite.tag;\n  var addTagArr = tagArr.concat(tag.replace(',', ''));\n  return _objectSpread({}, state, {\n    postWrite: _objectSpread({}, state.postWrite, {\n      tagArr: addTagArr,\n      tag: ''\n    })\n  });\n}), _createReducer));\nexport default post;","map":null,"metadata":{},"sourceType":"module"}