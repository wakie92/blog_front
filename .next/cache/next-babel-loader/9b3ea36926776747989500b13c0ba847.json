{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useCallback, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Editor, Preview } from '../../components/Write';\nimport { getValue, resetInputValue } from '../../store/modules/postUI';\nimport { ROUTES } from '../../lib/Routes/Routes';\nimport { removeExp, checkUser } from '../../lib/Utils/utils';\nimport { postAsync } from '../../store/modules/post';\nimport EditorHeaderContainer from '../Common/EditorHeaderContainer';\nimport useInputInEditor from '../../lib/hooks/useInput';\n\nconst WriteContainer = ({}) => {\n  const dispatch = useDispatch();\n  const [onChange, reset] = useInputInEditor();\n  const mdRef = useRef();\n  const {\n    postWrite,\n    postsList,\n    reqPost\n  } = useSelector(state => ({\n    postWrite: state.postUI.postWrite,\n    postsList: state.post.postsList,\n    reqPost: state.post.reqPost\n  }));\n  const router = useRouter();\n  const handleChange = useCallback(e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(getValue({\n      name,\n      value\n    }));\n  }, [dispatch]);\n  const handleConv = useCallback(html => {\n    dispatch(getValue({\n      name: 'mdValue',\n      value: html\n    }));\n  }, [dispatch]);\n  const onUpload = useCallback(() => {\n    const uploadDate = new Date().toISOString();\n    const {\n      title,\n      inputValue,\n      mdValue,\n      imgUrl,\n      subTitle,\n      tagArr\n    } = postWrite;\n    const withoutExp = removeExp(inputValue);\n    const dataForUpload = {\n      title: title,\n      rawContent: inputValue,\n      content: withoutExp,\n      contentMd: mdValue,\n      date: uploadDate,\n      imgUrl: imgUrl,\n      id: postsList.data[0].id + 1,\n      subTitle: subTitle,\n      tagArr: tagArr\n    };\n\n    try {\n      dispatch(postAsync.request(dataForUpload));\n    } catch (err) {\n      throw err;\n    }\n  }, [dispatch, postWrite]);\n  useEffect(() => {\n    if (reqPost.data) {\n      router.push(ROUTES.home, ROUTES.home, {\n        shallow: false\n      });\n    }\n  }, [reqPost.data]);\n  useEffect(() => {\n    mdRef.current.scrollTo(0, mdRef.current.scrollHeight);\n  }, [postWrite.inputValue]);\n  useEffect(() => {\n    return () => {\n      dispatch(resetInputValue());\n      reset();\n      checkUser();\n    };\n  }, []);\n  return __jsx(EditBox, null, __jsx(EditPart, null, __jsx(EditorHeaderContainer, {\n    onChange: onChange,\n    onUpload: onUpload\n  }), __jsx(Editor, {\n    inputValue: postWrite.inputValue,\n    onChange: handleChange\n  })), __jsx(Preview, {\n    inputValue: postWrite.inputValue,\n    mdRef: mdRef,\n    onChange: handleConv\n  }));\n};\n\nexport default React.memo(WriteContainer);\nconst EditBox = styled.div.withConfig({\n  displayName: \"WriteContainer__EditBox\",\n  componentId: \"sc-1ee72qh-0\"\n})([\"display:flex;height:94rem;justify-content:space-between;\"]);\nconst EditPart = styled.div.withConfig({\n  displayName: \"WriteContainer__EditPart\",\n  componentId: \"sc-1ee72qh-1\"\n})([\"width:calc(50% - 1.6rem);\"]);","map":null,"metadata":{},"sourceType":"module"}