{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _createReducer;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { asyncState, transformToArray, handleAsyncActions } from './../../../lib/Utils/asyncUtils';\nimport { createReducer } from 'typesafe-actions';\nimport { getPostsListAsync, GET_POSTS_LIST, GET_POSTS_LIST_SUCCESS, GET_POSTS_LIST_ERROR, UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_ERROR, GET_POST, GET_POST_SUCCESS, GET_POST_ERROR } from './actions';\nvar initialState = {\n  postsList: asyncState.initial(),\n  reqPost: asyncState.initial(),\n  post: asyncState.initial()\n};\nvar post = createReducer(initialState, (_createReducer = {}, _defineProperty(_createReducer, GET_POSTS_LIST, function (state) {\n  return _objectSpread({}, state, {\n    postsList: asyncState.loading()\n  });\n}), _defineProperty(_createReducer, GET_POSTS_LIST_SUCCESS, function (state, action) {\n  return _objectSpread({}, state, {\n    postsList: asyncState.success(action.payload)\n  });\n}), _defineProperty(_createReducer, GET_POSTS_LIST_ERROR, function (state, action) {\n  return _objectSpread({}, state, {\n    postsList: asyncState.error(action.payload)\n  });\n}), _defineProperty(_createReducer, UPDATE_POST, function (state) {\n  return _objectSpread({}, state, {\n    reqPost: asyncState.loading()\n  });\n}), _defineProperty(_createReducer, UPDATE_POST_SUCCESS, function (state, action) {\n  return _objectSpread({}, state, {\n    reqPost: asyncState.success(action.payload)\n  });\n}), _defineProperty(_createReducer, UPDATE_POST_ERROR, function (state, action) {\n  return _objectSpread({}, state, {\n    reqPost: asyncState.error(action.payload)\n  });\n}), _defineProperty(_createReducer, GET_POST, function (state) {\n  return _objectSpread({}, state, {\n    post: asyncState.loading()\n  });\n}), _defineProperty(_createReducer, GET_POST_SUCCESS, function (state, action) {\n  return _objectSpread({}, state, {\n    post: asyncState.success(action.payload)\n  });\n}), _defineProperty(_createReducer, GET_POST_ERROR, function (state, action) {\n  return _objectSpread({}, state, {\n    post: asyncState.error(action.payload)\n  });\n}), _createReducer)); // refactoring code\n\nvar test = createReducer(initialState).handleAction(transformToArray(getPostsListAsync), handleAsyncActions(getPostsListAsync, 'postsList'));\nexport default post;","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/store/modules/post/reducers.ts"],"names":["initialState","postsList","asyncState","reqPost","post","createReducer","action","test","transformToArray","handleAsyncActions"],"mappings":"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","sourcesContent":["import { asyncState, transformToArray, handleAsyncActions } from './../../../lib/Utils/asyncUtils';\r\nimport { PostState, PostActions, Post } from './types';\r\nimport { createReducer } from 'typesafe-actions';\r\nimport {\r\n\tgetPostsListAsync,\r\n\tpostAsync,\r\n\tGET_POSTS_LIST,\r\n\tGET_POSTS_LIST_SUCCESS,\r\n\tGET_POSTS_LIST_ERROR,\r\n\tUPDATE_POST,\r\n\tUPDATE_POST_SUCCESS,\r\n\tUPDATE_POST_ERROR,\r\n\tGET_POST,\r\n\tGET_POST_SUCCESS,\r\n\tGET_POST_ERROR\r\n} from './actions';\r\n\r\nconst initialState: PostState = {\r\n\tpostsList: asyncState.initial(),\r\n\treqPost: asyncState.initial(),\r\n\tpost: asyncState.initial(),\r\n};\r\nconst post = createReducer<PostState, PostActions>(initialState, {\r\n\t[GET_POSTS_LIST]: (state) => ({\r\n\t\t...state,\r\n\t\tpostsList: asyncState.loading()\r\n\t}),\r\n\t[GET_POSTS_LIST_SUCCESS]: (state, action) => {\r\n\t\treturn {\r\n\t\t...state,\r\n\t\tpostsList: asyncState.success(action.payload)\r\n\t}},\r\n\t[GET_POSTS_LIST_ERROR]: (state, action) => ({\r\n\t\t...state,\r\n\t\tpostsList: asyncState.error(action.payload)\r\n\t}),\r\n\t[UPDATE_POST]: (state) => ({\r\n\t\t...state,\r\n\t\treqPost: asyncState.loading()\r\n\t}),\r\n\t[UPDATE_POST_SUCCESS]: (state, action) => ({\r\n\t\t...state,\r\n\t\treqPost: asyncState.success(action.payload)\r\n\t}),\r\n\t[UPDATE_POST_ERROR]: (state, action) => ({\r\n\t\t...state,\r\n\t\treqPost: asyncState.error(action.payload)\r\n\t}),\r\n\t[GET_POST]: (state) => ({\r\n\t\t...state,\r\n\t\tpost: asyncState.loading(),\r\n\t}),\r\n\t[GET_POST_SUCCESS]: (state, action) => ({\r\n\t\t...state,\r\n\t\tpost: asyncState.success(action.payload)\r\n\t}),\r\n\t[GET_POST_ERROR]: (state, action) => ({\r\n\t\t...state,\r\n\t\tpost: asyncState.error(action.payload)\r\n\t})\r\n});\r\n\r\n// refactoring code\r\nconst test = createReducer<PostState, PostActions>(initialState).handleAction(\r\n\ttransformToArray(getPostsListAsync),\r\n\thandleAsyncActions(getPostsListAsync, 'postsList')\r\n);\r\n\r\nexport default post;\r\n"]},"metadata":{},"sourceType":"module"}