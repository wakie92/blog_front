{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Editor, Preview } from '../../components/Write';\nimport { getValue, resetInputValue, setInputValues } from '../../store/modules/postUI';\nimport EditorHeaderContainer from '../Common/EditorHeaderContainer';\nimport { putPostAsync } from '../../store/modules/post';\nimport { ROUTES } from '../../lib/Routes/Routes';\nimport { removeExp } from '../../lib/Utils/utils';\n\nvar EditContainer = function EditContainer(_ref) {\n  var editMode = _ref.editMode;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      postWrite: state.postUI.postWrite,\n      post: state.post.post\n    };\n  }),\n      postWrite = _useSelector.postWrite,\n      post = _useSelector.post;\n\n  var router = useRouter();\n  var mdRef = useRef();\n  var handleChange = useCallback(function (e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name;\n    dispatch(getValue({\n      name: name,\n      value: value\n    }));\n  }, [dispatch]);\n  var handleConv = useCallback(function (html) {\n    dispatch(getValue({\n      name: 'mdValue',\n      value: html\n    }));\n  }, [dispatch]);\n  var onUpload = useCallback(function () {\n    var title = postWrite.title,\n        inputValue = postWrite.inputValue,\n        mdValue = postWrite.mdValue,\n        imgUrl = postWrite.imgUrl,\n        subTitle = postWrite.subTitle,\n        tagArr = postWrite.tagArr;\n    var _post$data = post.data,\n        res = _post$data.res,\n        resId = _post$data.resId;\n    var uploadDate = new Date().toISOString();\n    var withoutExp = removeExp(inputValue);\n    var dataForUpload = {\n      title: title,\n      rawContent: inputValue,\n      content: withoutExp,\n      contentMd: mdValue,\n      date: uploadDate,\n      imgUrl: imgUrl,\n      id: res.id,\n      subTitle: subTitle,\n      tagArr: tagArr\n    };\n    dispatch(putPostAsync.request({\n      post: dataForUpload,\n      id: resId\n    }));\n    router.push(ROUTES.home, ROUTES.home, {\n      shallow: true\n    });\n  }, [dispatch, postWrite]);\n  useEffect(function () {\n    mdRef.current.scrollTo(0, mdRef.current.scrollHeight);\n  }, [postWrite.inputValue]);\n  useEffect(function () {\n    var _post$data$res = post.data.res,\n        rawContent = _post$data$res.rawContent,\n        contentMd = _post$data$res.contentMd,\n        imgUrl = _post$data$res.imgUrl,\n        title = _post$data$res.title,\n        subTitle = _post$data$res.subTitle,\n        tagArr = _post$data$res.tagArr;\n    dispatch(setInputValues({\n      title: title,\n      inputValue: rawContent,\n      mdValue: contentMd,\n      imgUrl: imgUrl,\n      subTitle: subTitle,\n      tagArr: tagArr,\n      tag: ''\n    }));\n    return function () {\n      dispatch(resetInputValue());\n    };\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(EditBox, null, __jsx(EditPart, null, __jsx(EditorHeaderContainer, {\n    onChange: handleChange,\n    onUpload: onUpload\n  }), __jsx(Editor, {\n    inputValue: postWrite.inputValue,\n    onChange: handleChange\n  })), __jsx(Preview, {\n    inputValue: postWrite.inputValue,\n    mdRef: mdRef,\n    onChange: handleConv\n  })));\n};\n\nexport default React.memo(EditContainer);\nvar EditBox = styled.div.withConfig({\n  displayName: \"EditContainer__EditBox\",\n  componentId: \"zobh5v-0\"\n})([\"display:flex;height:94rem;justify-content:space-between;\"]);\nvar EditPart = styled.div.withConfig({\n  displayName: \"EditContainer__EditPart\",\n  componentId: \"zobh5v-1\"\n})([\"width:calc(50% - 1.6rem);\"]);","map":null,"metadata":{},"sourceType":"module"}