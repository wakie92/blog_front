{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport AWS from 'aws-sdk';\nimport { AWSConfig } from '../../config/awsconfig';\nvar albumBucketName = AWSConfig.albumBucketName,\n    bucketRegion = AWSConfig.bucketRegion,\n    IdentityPoolId = AWSConfig.IdentityPoolId;\nvar paramKey = 'blog-oscar/images/';\nAWS.config.region = bucketRegion; // 리전\n\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n  IdentityPoolId: IdentityPoolId\n});\nAWS.config.update({\n  region: bucketRegion,\n  credentials: new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: IdentityPoolId\n  })\n});\nexport var addPhoto =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(e) {\n    var file, upload, result, url;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            file = e.target.files[0];\n            upload = new AWS.S3.ManagedUpload({\n              params: {\n                Bucket: albumBucketName,\n                Key: \"\".concat(paramKey).concat(file.name),\n                Body: file,\n                ACL: 'public-read'\n              }\n            });\n            result = upload.promise();\n            url = result.then(function (data) {\n              alert('사진이 등록되었습니다.');\n              return data.Location;\n            }, function (err) {\n              alert(\"\".concat(err.message));\n            });\n            return _context.abrupt(\"return\", url);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addPhoto(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/lib/Utils/S3.ts"],"names":["albumBucketName","bucketRegion","IdentityPoolId","AWSConfig","paramKey","AWS","region","credentials","addPhoto","file","e","upload","params","Bucket","Key","Body","ACL","result","url","alert","data","err"],"mappings":";;AAAA,OAAA,GAAA,MAAA,SAAA;AACA,SAAA,SAAA,QAAA,wBAAA;IAEQA,e,GAAkDG,S,CAAlDH,e;IAAiBC,Y,GAAiCE,S,CAAjCF,Y;IAAcC,c,GAAmBC,S,CAAnBD,c;AACvC,IAAME,QAAQ,GAAd,oBAAA;AAEAC,GAAG,CAAHA,MAAAA,CAAAA,MAAAA,GAAAA,YAAAA,C,CAAkC;;AAClCA,GAAG,CAAHA,MAAAA,CAAAA,WAAAA,GAAyB,IAAIA,GAAG,CAAP,0BAAA,CAAmC;AAC3DH,EAAAA,cAAc,EAAEA;AAD2C,CAAnC,CAAzBG;AAGAA,GAAG,CAAHA,MAAAA,CAAAA,MAAAA,CAAkB;AACjBC,EAAAA,MAAM,EADW,YAAA;AAEjBC,EAAAA,WAAW,EAAE,IAAIF,GAAG,CAAP,0BAAA,CAAmC;AAC/CH,IAAAA,cAAc,EAAEA;AAD+B,GAAnC;AAFI,CAAlBG;AAOA,OAAO,IAAMG,QAAQ;AAAA;AAAA,YAAA;AAAA,MAAA,IAAA,GAAA,iBAAA;AAAA;AAAA,EAAA,mBAAA,CAAA,IAAA,CAAG,SAAA,OAAA,CAAA,CAAA,EAAA;AAAA,QAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,GAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AACjBC,YAAAA,IADiB,GACVC,CAAC,CAADA,MAAAA,CAAAA,KAAAA,CADU,CACVA,CAAPD;AACAE,YAAAA,MAFiB,GAER,IAAIN,GAAG,CAAHA,EAAAA,CAAJ,aAAA,CAAyB;AACvCO,cAAAA,MAAM,EAAE;AACPC,gBAAAA,MAAM,EADC,eAAA;AAEPC,gBAAAA,GAAG,EAAA,GAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAgBL,IAAI,CAFhB,IAEJ,CAFI;AAGPM,gBAAAA,IAAI,EAHG,IAAA;AAIPC,gBAAAA,GAAG,EAAE;AAJE;AAD+B,aAAzB,CAATL;AASAM,YAAAA,MAXiB,GAWRN,MAAM,CAXE,OAWRA,EAATM;AACAC,YAAAA,GAZiB,GAYa,MAAM,CAAN,IAAA,CACnC,UAAA,IAAA,EAAyC;AACxCC,cAAAA,KAAK,CAALA,cAAK,CAALA;AACA,qBAAOC,IAAI,CAAX,QAAA;AAHkC,aAAA,EAKnC,UAAA,GAAA,EAAgB;AACfD,cAAAA,KAAK,CAAA,GAAA,MAAA,CAAIE,GAAG,CAAZF,OAAK,CAAA,CAALA;AAlBqB,aAYa,CAA9BD;AAZiB,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,GAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA;AAAH,GAAA,CAAA,CAAA;;AAAA,SAAA,SAARV,QAAQ,CAAA,EAAA,EAAA;AAAA,WAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,GAAA;AAAd,CAAc,EAAd","sourcesContent":["import AWS from 'aws-sdk';\r\nimport { AWSConfig } from '../../config/awsconfig';\r\n\r\nconst { albumBucketName, bucketRegion, IdentityPoolId } = AWSConfig\r\nconst paramKey = 'blog-oscar/images/';\r\n\r\nAWS.config.region = bucketRegion; // 리전\r\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n\tIdentityPoolId: IdentityPoolId\r\n});\r\nAWS.config.update({\r\n\tregion: bucketRegion,\r\n\tcredentials: new AWS.CognitoIdentityCredentials({\r\n\t\tIdentityPoolId: IdentityPoolId\r\n\t})\r\n});\r\n\r\nexport const addPhoto = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\tconst file = e.target.files[0];\r\n\tconst upload = new AWS.S3.ManagedUpload({\r\n\t\tparams: {\r\n\t\t\tBucket: albumBucketName,\r\n\t\t\tKey: `${paramKey}${file.name}`,\r\n\t\t\tBody: file,\r\n\t\t\tACL: 'public-read'\r\n\t\t}\r\n\t});\r\n\r\n\tconst result = upload.promise();\r\n\tconst url: Promise<string | void> = result.then(\r\n\t\t(data: AWS.S3.ManagedUpload.SendData) => {\r\n\t\t\talert('사진이 등록되었습니다.');\r\n\t\t\treturn data.Location;\r\n\t\t},\r\n\t\t(err: Error) => {\r\n\t\t\talert(`${err.message}`);\r\n\t\t}\r\n\t);\r\n\treturn url;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}