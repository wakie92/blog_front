{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  html {\\n    font-size:62.5%;\\n    background-color: #fff;\\n  }\\n  body {\\n    margin: 0;\\n    padding: 0;\\n    font-size: 18px;\\n    font-weight: normal;\\n    line-height: 1.8;\\n    color: #343a40;\\n    font-family: 'Noto Sans KR';\\n    box-sizing: border-box;\\n  }\\n  * {\\n    margin: 0;\\n    padding: 0;\\n    outline: 0;\\n    border: 0;\\n    vertical-align: top;\\n  }\\n  article, footer, header, aside, details, header, nav, section {\\n    display: block;\\n  }\\n\\n  img {\\n    max-width: 100%;\\n  }\\n  a {\\n    text-decoration: none;\\n    color: #343a40;\\n  }\\n  h1 {\\n    font-weight: 700;\\n  }\\n  button {\\n    cursor: pointer;\\n  }\\n  p {\\n    margin: 0;\\n  }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport Layout from '../components/CommonUI/Layout';\nimport configureStore from '../store/configureStore';\nimport { getIsLogged } from '../store/modules/loginUI'; // composeWithDevTools()\n// const configureStore = () => {\n//   const sagaMiddleware = createSagaMiddleware();\n//   const middleware = [composeWithDevTools(), sagaMiddleware]\n//   const store = createStore(rootReducer,  applyMiddleware(sagaMiddleware) );\n//   // if (req || !isServer) {\n//     sagaMiddleware.run(rootSaga)\n//   // }\n//   return store;\n// };\n\nvar MyApp2 = function MyApp2(props) {\n  var Component = props.Component,\n      pageProps = props.pageProps,\n      store = props.store;\n  return __jsx(ThemeProvider, {\n    theme: {\n      fontFamily: 'Noto Sans KR'\n    }\n  }, __jsx(Provider, {\n    store: store\n  }, __jsx(Layout, null, __jsx(Component, pageProps))), __jsx(React.Fragment, null, __jsx(GlobalStyle, null)));\n};\n\nMyApp2.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var Component, ctx, pageProps;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Component = _ref.Component, ctx = _ref.ctx;\n            pageProps = {}; // 서버사이드에서 리덕스 연결 성공. 원인 공부\n\n            if (!ctx.isServer) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 5;\n            return Component.getInitialProps(ctx);\n\n          case 5:\n            pageProps = _context.sent; //check login\n\n            if (!ctx.req.headers.cookie) {\n              console.log('none cookie');\n              ctx.store.dispatch(getIsLogged(false));\n            } else {\n              ctx.store.dispatch(getIsLogged(true));\n            }\n\n          case 7:\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default withRedux(configureStore)(withReduxSaga(MyApp2));\nvar GlobalStyle = createGlobalStyle(_templateObject());","map":null,"metadata":{},"sourceType":"module"}